{"data": [{"id": 0, "name": "\u00bfCu\u00e1l de estas opciones es un m\u00e9todo para declarar un Publisher en Combine?", "answers": [{"id": "type_a", "value": "var cualquierNombre: Observable"}, {"id": "type_b", "value": "var cualquierNombre: Publisher"}, {"id": "type_c", "value": "var cualquierNombre: PassthroughSubject"}, {"id": "type_d", "value": "var cualquierNombre: CurrentValueSubject"}], "code": "", "gistURL": "", "correct": "type_c", "explanation": "PassthroughSubject y CurrentValueSubject son tipos de publishers en Combine.", "created_by": "SwiftBeta_"}, {"id": 1, "name": "\u00bfCu\u00e1l de los siguientes modifica el valor de retorno del objeto Binding en SwiftUI?", "answers": [{"id": "type_a", "value": ".formatted()"}, {"id": "type_b", "value": ".sqeueze()"}, {"id": "type_c", "value": ".map()"}, {"id": "type_d", "value": ".trim()"}], "code": "", "gistURL": "", "correct": "type_c", "explanation": ".map() se usa en SwiftUI con Binding para modificar el valor de retorno.", "created_by": "SwiftBeta_"}, {"id": 2, "name": "\u00bfCu\u00e1l es la sintaxis correcta para la declaraci\u00f3n de una funci\u00f3n con m\u00faltiples cl\u00e1usulas guard en Swift?", "answers": [{"id": "type_a", "value": "guard...else, guard...else"}, {"id": "type_b", "value": "guard...else; guard...else"}, {"id": "type_c", "value": "guard...else \\n guard...else"}, {"id": "type_d", "value": "guard...else {...}, guard...else {...}"}], "code": "", "gistURL": "", "correct": "type_b", "explanation": "La declaraci\u00f3n de m\u00faltiples cl\u00e1usulas guard en Swift se separa con un punto y coma.", "created_by": "SwiftBeta_"}, {"id": 3, "name": "\u00bfC\u00f3mo se llama la propiedad que permite cambiar el contenido de una vista en funci\u00f3n de un estado?", "answers": [{"id": "type_a", "value": "@Environment"}, {"id": "type_b", "value": "@State"}, {"id": "type_c", "value": "@Binding"}, {"id": "type_d", "value": "@ObservedObject"}], "code": "", "gistURL": "", "correct": "type_b", "explanation": "La propiedad @State se utiliza en SwiftUI para cambiar el contenido de una vista en funci\u00f3n de un estado.", "created_by": "SwiftBeta_"}, {"id": 4, "name": "\u00bfQu\u00e9 m\u00e9todo de la clase UIScrollViewDelegate se utiliza para detectar el final del desplazamiento?", "answers": [{"id": "type_a", "value": "scrollViewDidEndDecelerating"}, {"id": "type_b", "value": "scrollViewDidEndScrolling"}, {"id": "type_c", "value": "scrollViewWillEndDragging"}, {"id": "type_d", "value": "scrollViewDidEndDragging"}], "code": "", "gistURL": "", "correct": "type_a", "explanation": "scrollViewDidEndDecelerating es el m\u00e9todo que se llama cuando el desplazamiento en una UIScrollView llega al final.", "created_by": "SwiftBeta_"}, {"id": 5, "name": "\u00bfCu\u00e1l es el resultado de comparar dos instancias de un objeto que adopta el protocolo Equatable?", "answers": [{"id": "type_a", "value": "true o false"}, {"id": "type_b", "value": "1 o 0"}, {"id": "type_c", "value": "-1, 0 o 1"}, {"id": "type_d", "value": "nil"}], "code": "", "gistURL": "", "correct": "type_a", "explanation": "Cuando dos objetos adoptan el protocolo Equatable, se pueden comparar usando ==, devolviendo true si son iguales o false si no lo son.", "created_by": "SwiftBeta_"}, {"id": 6, "name": "En SwiftUI, \u00bfqu\u00e9 modificador permite que un GestureRecognizer admita m\u00e1s de un gesto?", "answers": [{"id": "type_a", "value": "simultaneousGesture"}, {"id": "type_b", "value": "composedGesture"}, {"id": "type_c", "value": "exclusiveGesture"}, {"id": "type_d", "value": "combinedGesture"}], "code": "", "gistURL": "", "correct": "type_a", "explanation": "El modificador .simultaneousGesture en SwiftUI permite que un GestureRecognizer admita m\u00e1s de un gesto a la vez.", "created_by": "SwiftBeta_"}, {"id": 7, "name": "\u00bfCu\u00e1l es la sintaxis para declarar un Error personalizado en Swift?", "answers": [{"id": "type_a", "value": "enum MiError: Throwable {}"}, {"id": "type_b", "value": "enum MiError: Error {}"}, {"id": "type_c", "value": "struct MiError: Throwable {}"}, {"id": "type_d", "value": "class MiError: Error {}"}], "code": "", "gistURL": "", "correct": "type_b", "explanation": "Para declarar un Error personalizado en Swift, utilizamos un enum que confirma el protocolo Error.", "created_by": "SwiftBeta_"}, {"id": 8, "name": "\u00bfC\u00f3mo podemos establecer que un m\u00e9todo o propiedad sea privada en una clase?", "answers": [{"id": "type_a", "value": "Secured"}, {"id": "type_b", "value": "Private"}, {"id": "type_c", "value": "Hidden"}, {"id": "type_d", "value": "Protected"}], "code": "", "gistURL": "", "correct": "type_b", "explanation": "En Swift, utilizamos la palabra clave 'private' para establecer un m\u00e9todo o propiedad como privada.", "created_by": "SwiftBeta_"}, {"id": 9, "name": "\u00bfCu\u00e1l de las siguientes opciones NO es una funci\u00f3n de Swift?", "answers": [{"id": "type_a", "value": "viewDidLoad()"}, {"id": "type_b", "value": "print()"}, {"id": "type_c", "value": "map()"}, {"id": "type_d", "value": "sorted()"}], "code": "", "gistURL": "", "correct": "type_a", "explanation": "viewDidLoad() es un m\u00e9todo de UIViewController y no una funci\u00f3n de Swift.", "created_by": "SwiftBeta_"}]}