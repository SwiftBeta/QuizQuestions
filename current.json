{"data": [{"id": 0, "name": "\u00bfCu\u00e1l es la forma correcta de declarar una estructura en Swift?", "answers": [{"id": "type_a", "value": "struct MyStruct"}, {"id": "type_b", "value": "class MyStruct"}, {"id": "type_c", "value": "enum MyStruct"}, {"id": "type_d", "value": "func MyStruct()"}], "code": "", "gistURL": "", "correct": "type_a", "explanation": "Las estructuras se declaran utilizando la palabra clave 'struct', seguida del nombre de la estructura.", "created_by": "SwiftBeta_"}, {"id": 1, "name": "\u00bfQu\u00e9 m\u00e9todo se utiliza para actualizar la vista cuando hay cambios en el estado?", "answers": [{"id": "type_a", "value": "updateView()"}, {"id": "type_b", "value": "redraw()"}, {"id": "type_c", "value": "refresh()"}, {"id": "type_d", "value": "objectWillChange.send()"}], "code": "class MyViewModel: ObservableObject {\n  @Published var myProperty: String?\n  func updateProperty() {\n    myProperty = \"New Value\"\n    // \u00bfQu\u00e9 m\u00e9todo va aqu\u00ed?\n  }\n}", "gistURL": "https://gist.github.com/SwiftBeta/26b661fb71ba00367588c04db51dacf4.js", "correct": "type_d", "explanation": "Para actualizar la vista cuando hay cambios en el estado, se utiliza el m\u00e9todo 'objectWillChange.send()' en el modelo de vista.", "created_by": "SwiftBeta_"}, {"id": 2, "name": "\u00bfCu\u00e1l es el tipo de datos utilizado para almacenar colores en SwiftUI?", "answers": [{"id": "type_a", "value": "UIColor"}, {"id": "type_b", "value": "Color"}, {"id": "type_c", "value": "CGColor"}, {"id": "type_d", "value": "NSColor"}], "code": "", "gistURL": "", "correct": "type_b", "explanation": "En SwiftUI, se utiliza el tipo de datos 'Color' para almacenar y trabajar con colores.", "created_by": "SwiftBeta_"}, {"id": 3, "name": "\u00bfQu\u00e9 c\u00f3digo crea un VStack con dos Text views en SwiftUI?", "answers": [{"id": "type_a", "value": "Grid { Text(\"Hello\") Text(\"World\") }"}, {"id": "type_b", "value": "VStack(alignment: .leading) { Text(\"Hello\"); Text(\"World\") }"}, {"id": "type_c", "value": "HStack { Text(\"Hello\") Text(\"World\") }"}, {"id": "type_d", "value": "VStack { Text(\"Hello\"); Text(\"World\") }"}], "code": "", "gistURL": "", "correct": "type_d", "explanation": "Se crea un VStack con dos Text views utilizando 'VStack { Text(\"Hello\"); Text(\"World\") }'.", "created_by": "SwiftBeta_"}, {"id": 4, "name": "\u00bfCu\u00e1l es la sintaxis correcta para crear una binding de un @State en una vista hija en SwiftUI?", "answers": [{"id": "type_a", "value": "@Binding var myState: MyType"}, {"id": "type_b", "value": "@State var myState: MyType"}, {"id": "type_c", "value": "@StateBinding var myState: MyType"}, {"id": "type_d", "value": "@StateObject var myState: MyType"}], "code": "struct ParentView: View {\n  @State private var myState: MyType\n  var body: some View {\n    ChildView(myState: $myState)\n  }\n}\n\n// \u00bfQu\u00e9 sintaxis va en ChildView?", "gistURL": "https://gist.github.com/SwiftBeta/25239e89848705c86ac8abeed6f70c67.js", "correct": "type_a", "explanation": "Se crea una binding de un @State usando la sintaxis '@Binding var myState: MyType' en la vista hija.", "created_by": "SwiftBeta_"}, {"id": 5, "name": "\u00bfCu\u00e1l es el m\u00e9todo de la clase DispatchQueue utilizado para ejecutar una tarea en el hilo principal?", "answers": [{"id": "type_a", "value": "DispatchQueue.main()"}, {"id": "type_b", "value": "DispatchQueue.main.async()"}, {"id": "type_c", "value": "DispatchQueue.main.sync()"}, {"id": "type_d", "value": "DispatchQueue.global().async()"}], "code": "", "gistURL": "", "correct": "type_b", "explanation": "Se utiliza el m\u00e9todo 'DispatchQueue.main.async()' para ejecutar una tarea en el hilo principal.", "created_by": "SwiftBeta_"}, {"id": 6, "name": "\u00bfQu\u00e9 significa el modificador 'private' en Swift?", "answers": [{"id": "type_a", "value": "El acceso est\u00e1 restringido solo al archivo que contiene la declaraci\u00f3n."}, {"id": "type_b", "value": "El acceso est\u00e1 restringido solo al alcance que contiene la declaraci\u00f3n."}, {"id": "type_c", "value": "El acceso est\u00e1 restringido a la misma clase y a las subclases."}, {"id": "type_d", "value": "No hay restricciones de acceso."}], "code": "", "gistURL": "", "correct": "type_b", "explanation": "El modificador 'private' restringe el acceso solo al alcance que contiene la declaraci\u00f3n.", "created_by": "SwiftBeta_"}, {"id": 7, "name": "\u00bfCu\u00e1l es el valor predeterminado de la propiedad 'spacing' en un VStack en SwiftUI?", "answers": [{"id": "type_a", "value": "0"}, {"id": "type_b", "value": "8"}, {"id": "type_c", "value": "16"}, {"id": "type_d", "value": "Ninguno"}], "code": "", "gistURL": "", "correct": "type_b", "explanation": "El valor predeterminado de la propiedad 'spacing' en un VStack en SwiftUI es 8.", "created_by": "SwiftBeta_"}, {"id": 8, "name": "\u00bfCu\u00e1l es el m\u00e9todo utilizado para iniciar una animaci\u00f3n en SwiftUI?", "answers": [{"id": "type_a", "value": "trigger()"}, {"id": "type_b", "value": "animate()"}, {"id": "type_c", "value": "start()"}, {"id": "type_d", "value": "withAnimation()"}], "code": "@State private var scale: CGFloat = 1\n\nfunc animateScale() {\n  scale = 2\n  // \u00bfQu\u00e9 m\u00e9todo va aqu\u00ed?\n}", "gistURL": "https://gist.github.com/SwiftBeta/620c66fd24c29d55da5819c9c19a229f.js", "correct": "type_d", "explanation": "Se utiliza el m\u00e9todo 'withAnimation()' para iniciar una animaci\u00f3n en SwiftUI.", "created_by": "SwiftBeta_"}, {"id": 9, "name": "\u00bfCu\u00e1l es el atributo utilizado para marcar una propiedad como obsoleta en Swift?", "answers": [{"id": "type_a", "value": "@available()"}, {"id": "type_b", "value": "@deprecated()"}, {"id": "type_c", "value": "@obsoleted()"}, {"id": "type_d", "value": "@unavailable()"}], "code": "", "gistURL": "", "correct": "type_a", "explanation": "Se utiliza el atributo '@available()' con la opci\u00f3n 'deprecated' para marcar una propiedad como obsoleta en Swift.", "created_by": "SwiftBeta_"}]}
