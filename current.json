{"data": [{"id": 0, "name": "\u00bfCu\u00e1l es la forma correcta de acceder a una propiedad opcional de tipo String en Swift?", "answers": [{"id": "type_a", "value": "Usando if let optionalProperty = objeto.optionalProperty { // Haz algo con optionalProperty }"}, {"id": "type_b", "value": "Usando objeto?.optionalProperty ?? \"default value\""}, {"id": "type_c", "value": "Usando objeto.optionalProperty!"}, {"id": "type_d", "value": "Usando objeto?.optionalProperty"}], "code": "let optionalProperty: String?\n\nif let unwrappedProperty = optionalProperty {\n    print(unwrappedProperty)\n}\n\n// Output: nil\n", "gistURL": "https://gist.github.com/SwiftBeta/e1e0152457231dfbfc24d57370261929.js", "correct": "type_a", "created_by": "SwiftBeta_"}, {"id": 1, "name": "\u00bfQu\u00e9 es la propiedad lazy en Swift y cu\u00e1l es su utilidad?", "answers": [{"id": "type_a", "value": "Es una propiedad que se ejecuta al instanciar un objeto y su utilidad es ahorrar memoria en tiempo de ejecuci\u00f3n."}, {"id": "type_b", "value": "Es una propiedad que se ejecuta al llamarla por primera vez y su utilidad es evitar procesos de inicializaci\u00f3n computacionalmente costosos."}, {"id": "type_c", "value": "Es una propiedad que se ejecuta cada vez que se instancie un objeto y su utilidad es evitar creaci\u00f3n de objetos adicionales."}, {"id": "type_d", "value": "Es una propiedad que se ejecuta en un hilo en segundo plano y su utilidad es mejorar el rendimiento de la aplicaci\u00f3n."}], "code": "class ExampleClass {\n    lazy var property: String = {\n        // Proceso computacionalmente costoso\n        return \"Property\"\n    }()\n}\n\nlet object = ExampleClass()\nprint(\"Lazy property not initialized yet\")\nprint(object.property)\n\n// Output:\n// Lazy property not initialized yet\n// Property\n", "gistURL": "https://gist.github.com/SwiftBeta/f1b3d1ddce2702b63c571330e040e874.js", "correct": "type_b", "created_by": "SwiftBeta_"}, {"id": 2, "name": "\u00bfCu\u00e1l es el ciclo de vida de un View en SwiftUI?", "answers": [{"id": "type_a", "value": "Se crea el View, luego se llama a la funci\u00f3n update y finalmente se destruye."}, {"id": "type_b", "value": "Se destruye el View, se actualiza y finalmente se crea de nuevo."}, {"id": "type_c", "value": "Se crea el View, se actualiza y finalmente se destruye."}, {"id": "type_d", "value": "Se destruye el View, se crea de nuevo y finalmente se llama a la funci\u00f3n update."}], "code": "", "gistURL": "", "correct": "type_c", "created_by": "SwiftBeta_"}, {"id": 3, "name": "\u00bfQu\u00e9 es un Publisher en Combine y cu\u00e1l es su utilidad?", "answers": [{"id": "type_a", "value": "Es un objeto que recibe uno o varios valores y los transforma en un \u00fanico valor."}, {"id": "type_b", "value": "Es un objeto que recibe uno o varios valores y los transforma en un nuevo Publisher."}, {"id": "type_c", "value": "Es un objeto que env\u00eda uno o varios valores y se suscribe para realizar una tarea cuando reciba un valor."}, {"id": "type_d", "value": "Es un objeto que env\u00eda uno o varios valores y se suscribe para recibir un valor transformado de otro Publisher."}], "code": "", "gistURL": "", "correct": "type_d", "created_by": "SwiftBeta_"}, {"id": 4, "name": "\u00bfQu\u00e9 es un protocolo en Swift y c\u00f3mo se utiliza?", "answers": [{"id": "type_a", "value": "Es un conjunto de funciones y propiedades que se heredan de una clase padre y se implementan en la subclase."}, {"id": "type_b", "value": "Es un conjunto de funciones y propiedades que se implementan en una clase y se heredan en las subclases."}, {"id": "type_c", "value": "Es un conjunto de funciones y propiedades que se implementan dentro de un objeto y se pueden llamar desde cualquier punto de la aplicaci\u00f3n."}, {"id": "type_d", "value": "Es un conjunto de funciones y propiedades que se definen en un archivo separado y se importa en una clase para su uso."}], "code": "", "gistURL": "", "correct": "type_b", "created_by": "SwiftBeta_"}, {"id": 5, "name": "\u00bfQu\u00e9 es el Autolayout en UIKit y c\u00f3mo se utiliza?", "answers": [{"id": "type_a", "value": "Es un sistema que permite dise\u00f1ar interfaces de usuario adaptables a diferentes tama\u00f1os de pantalla."}, {"id": "type_b", "value": "Es una funci\u00f3n de UIKit que permite crear animaciones de forma f\u00e1cil y r\u00e1pida."}, {"id": "type_c", "value": "Es una funci\u00f3n de UIKit que permite redimensionar las vistas sin necesidad de crear nuevas instancias."}, {"id": "type_d", "value": "Es una funci\u00f3n de UIKit que permite crear objetos con tama\u00f1os y caracter\u00edsticas preestablecidas para su uso en la aplicaci\u00f3n."}], "code": "", "gistURL": "", "correct": "type_a", "created_by": "SwiftBeta_"}, {"id": 6, "name": "\u00bfQu\u00e9 es una extensi\u00f3n en Swift y c\u00f3mo se utiliza?", "answers": [{"id": "type_a", "value": "Es un nuevo tipo de objeto que se crea a partir de la combinaci\u00f3n de dos o m\u00e1s objetos existentes."}, {"id": "type_b", "value": "Es un archivo separado del original que contiene una copia modificada de un objeto existente."}, {"id": "type_c", "value": "Es una forma de agregar m\u00e9todos o propiedades a un tipo existente sin necesidad de crear una subclase."}, {"id": "type_d", "value": "Es una forma de crear nuevos objetos con caracter\u00edsticas especiales para ser usados en la aplicaci\u00f3n."}], "code": "", "gistURL": "", "correct": "type_c", "created_by": "SwiftBeta_"}, {"id": 7, "name": "\u00bfC\u00f3mo se declara una propiedad est\u00e1tica en Swift?", "answers": [{"id": "type_a", "value": "static let property = value"}, {"id": "type_b", "value": "static var property: Type { get set }"}, {"id": "type_c", "value": "let static property = value"}, {"id": "type_d", "value": "var static property: Type { get set }"}], "code": "", "gistURL": "", "correct": "type_a", "created_by": "SwiftBeta_"}, {"id": 8, "name": "\u00bfCu\u00e1l es la diferencia entre el operador ? y el operador ! en Swift?", "answers": [{"id": "type_a", "value": "El operador ? se utiliza para desempaquetar optionals, mientras que el operador ! se utiliza para definir una propiedad vac\u00eda."}, {"id": "type_b", "value": "El operador ? se utiliza para declarar una variable opcional, mientras que el operador ! se utiliza para declarar una variable no opcional."}, {"id": "type_c", "value": "El operador ? se utiliza para forzar el desempaquetamiento de una optional, mientras que el operador ! se utiliza para declarar una propiedad opcional."}, {"id": "type_d", "value": "El operador ? se utiliza para declarar una propiedad vac\u00eda, mientras que el operador ! se utiliza para desempaquetar optionals."}], "code": "", "gistURL": "", "correct": "type_c", "created_by": "SwiftBeta_"}, {"id": 9, "name": "\u00bfQu\u00e9 es un closure en Swift y c\u00f3mo se utiliza?", "answers": [{"id": "type_a", "value": "Es una funci\u00f3n que se ejecuta en un hilo en segundo plano y se suscribe para recibir un valor transformado de otro Publisher."}, {"id": "type_b", "value": "Es un bloque de c\u00f3digo que se puede almacenar y pasar como un objeto a otra funci\u00f3n o m\u00e9todo."}, {"id": "type_c", "value": "Es una variable que almacena un valor opcional y se puede utilizar en una expresi\u00f3n de guard."}, {"id": "type_d", "value": "Es un objeto que encapsula un conjunto de valores y se puede utilizar para pasar datos entre diferentes partes de una aplicaci\u00f3n."}], "code": "", "gistURL": "", "correct": "type_b", "created_by": "SwiftBeta_"}]}