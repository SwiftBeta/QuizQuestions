{"data": [{"id": 0, "name": "\u00bfQu\u00e9 hace la funci\u00f3n 'reduce'?", "answers": [{"id": "type_a", "value": "Filtra elementos de un array"}, {"id": "type_b", "value": "Aplica una funci\u00f3n a los elementos de un array y devuelve un \u00fanico valor"}, {"id": "type_c", "value": "Mapea los elementos de un array a otros valores"}, {"id": "type_d", "value": "Elimina duplicados en un array"}], "code": "let numbers = [1, 2, 3, 4, 5]\nlet sum = numbers.reduce(0, +)", "gistURL": "https://gist.github.com/SwiftBeta/f22c75d2d3be9f0933085623413ddabb.js", "correct": "type_b", "explanation": "La funci\u00f3n 'reduce' toma dos argumentos, un valor inicial y una funci\u00f3n que acepta dos argumentos: un acumulador y un elemento del array. La funci\u00f3n devuelve un \u00fanico valor acumulado despu\u00e9s de aplicar la funci\u00f3n a todos los elementos del array.", "created_by": "SwiftBeta_"}, {"id": 1, "name": "\u00bfQu\u00e9 declaraci\u00f3n 'if' es correcta en SwiftUI?", "answers": [{"id": "type_a", "value": "@State if var isOn = false"}, {"id": "type_b", "value": "@State var isOn = false"}, {"id": "type_c", "value": "if @State var isOn = false"}, {"id": "type_d", "value": "@State if var isOn == false"}], "code": "", "gistURL": "", "correct": "type_b", "explanation": "La declaraci\u00f3n correcta para usar una variable 'if' con una propiedad 'State' en SwiftUI es '@State var variableName = value'.", "created_by": "SwiftBeta_"}, {"id": 2, "name": "\u00bfC\u00f3mo se llama la funci\u00f3n para detectar desplazamiento hasta el final de un ScrollView en SwiftUI?", "answers": [{"id": "type_a", "value": "onScroll"}, {"id": "type_b", "value": "onReachBottom"}, {"id": "type_c", "value": "onAppear"}, {"id": "type_d", "value": "Ninguna de las anteriores"}], "code": "", "gistURL": "", "correct": "type_d", "explanation": "No existe una funci\u00f3n predefinida en SwiftUI para detectar el desplazamiento hasta el final de un ScrollView. Sin embargo, se puede lograr este comportamiento utilizando GeometryReader y otras t\u00e9cnicas.", "created_by": "SwiftBeta_"}, {"id": 3, "name": "\u00bfCu\u00e1l de las siguientes opciones es un operador de Combine para combinar dos Publishers?", "answers": [{"id": "type_a", "value": "flatMap"}, {"id": "type_b", "value": "compactMap"}, {"id": "type_c", "value": "zip"}, {"id": "type_d", "value": "debounce"}], "code": "", "gistURL": "", "correct": "type_c", "explanation": "El operador 'zip' en Combine combina dos Publishers. Toma dos flujos de valores y produce un flujo de pares que contiene el valor de ambos flujos en el mismo \u00edndice.", "created_by": "SwiftBeta_"}, {"id": 4, "name": "\u00bfQu\u00e9 operador de UIKit crea un layout de celdas din\u00e1micas?", "answers": [{"id": "type_a", "value": "UIFlowLayout"}, {"id": "type_b", "value": "UIStackView"}, {"id": "type_c", "value": "UICollectionViewCompositionalLayout"}, {"id": "type_d", "value": "UIGridLayout"}], "code": "let layout = UICollectionViewCompositionalLayout { (sectionIndex: Int, layoutEnvironment: NSCollectionLayoutEnvironment) -> NSCollectionLayoutSection? in /* c\u00f3digo de secci\u00f3n de layout aqu\u00ed */ }", "gistURL": "https://gist.github.com/SwiftBeta/7cb442ef4f1eeb1053cf4aec9caa9fd3.js", "correct": "type_c", "explanation": "UICollectionViewCompositionalLayout proporciona un enfoque flexible y din\u00e1mico para crear dise\u00f1os de celdas en UICollectionView.", "created_by": "SwiftBeta_"}]}