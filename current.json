{"data": [{"id": 0, "name": "\u00bfCu\u00e1l de las siguientes opciones es la forma correcta de hacer una declaraci\u00f3n condicional en Swift?", "answers": [{"id": "type_a", "value": "if condition {}"}, {"id": "type_b", "value": "if (condition) {}"}, {"id": "type_c", "value": "if {condition} {}"}, {"id": "type_d", "value": "if [condition] {}"}], "code": "let condition = true\nif condition {\n    print(\"True\")\n}", "gistURL": "https://gist.github.com/SwiftBeta/2af857a09d616ab5bd310b67e3adaa49.js", "correct": "type_a", "explanation": "En Swift, la sintaxis para una declaraci\u00f3n condicional es 'if condition {}', sin par\u00e9ntesis.", "created_by": "SwiftBeta_"}, {"id": 1, "name": "\u00bfCu\u00e1l es la forma correcta de crear un Optional en Swift?", "answers": [{"id": "type_a", "value": "var myVar?"}, {"id": "type_b", "value": "var? myVar"}, {"id": "type_c", "value": "var myVar: Type?"}, {"id": "type_d", "value": "None of the above"}], "code": "var myVar: Int? = nil", "gistURL": "https://gist.github.com/SwiftBeta/224c44e8ea81b5e95e6c72b1a5375aab.js", "correct": "type_c", "explanation": "En Swift, un Optional se crea usando la sintaxis 'var myVar: Type?'", "created_by": "SwiftBeta_"}, {"id": 2, "name": "\u00bfCu\u00e1l es la sintaxis correcta para crear una subclase en Swift?", "answers": [{"id": "type_a", "value": "class Subclass : Superclass {}"}, {"id": "type_b", "value": "class Subclass extends Superclass {}"}, {"id": "type_c", "value": "class Subclass inherits Superclass {}"}, {"id": "type_d", "value": "class Subclass < Superclass {}"}], "code": "class Animal {}\nclass Dog: Animal {}", "gistURL": "https://gist.github.com/SwiftBeta/7f9a724e313262db691c24fc3767d34c.js", "correct": "type_a", "explanation": "En Swift, la sintaxis para crear una subclase es 'class Subclass : Superclass {}'", "created_by": "SwiftBeta_"}, {"id": 3, "name": "\u00bfQu\u00e9 operador se usa para desempaquetar un Optional en Swift?", "answers": [{"id": "type_a", "value": "->"}, {"id": "type_b", "value": "&"}, {"id": "type_c", "value": "!"}, {"id": "type_d", "value": "?"}], "code": "var myVar: Int? = 42\nlet myUnwrappedVar = myVar!", "gistURL": "https://gist.github.com/SwiftBeta/22781271fef288305f8ed398934913d5.js", "correct": "type_c", "explanation": "En Swift, el operador '!' se utiliza para desempaquetar un Optional.", "created_by": "SwiftBeta_"}, {"id": 4, "name": "\u00bfQu\u00e9 funci\u00f3n se utiliza para manejar los errores en una operaci\u00f3n en Swift?", "answers": [{"id": "type_a", "value": "handleError"}, {"id": "type_b", "value": "errorCatch"}, {"id": "type_c", "value": "catch"}, {"id": "type_d", "value": "throw"}], "code": "do {\n    try myFunction()\n} catch {\n    print(error)\n}", "gistURL": "https://gist.github.com/SwiftBeta/f71baf5b17f3e033bf10d3506d8f98bf.js", "correct": "type_c", "explanation": "En Swift, la funci\u00f3n 'catch' se utiliza para manejar errores en una operaci\u00f3n.", "created_by": "SwiftBeta_"}, {"id": 5, "name": "\u00bfCu\u00e1l de las siguientes opciones es la forma correcta de hacer un switch case en Swift?", "answers": [{"id": "type_a", "value": "switch value { case x: ... }"}, {"id": "type_b", "value": "switch (value) { case x: ... }"}, {"id": "type_c", "value": "switch value { case x: }"}, {"id": "type_d", "value": "switch(value) { case x: ... }"}], "code": "let value = 2\nswitch value {\ncase 1:\n    print(\"One\")\ncase 2:\n    print(\"Two\")\ndefault:\n    print(\"Other\")\n}", "gistURL": "https://gist.github.com/SwiftBeta/429f43a20ddfe2a8ebf1c729f4a12fe5.js", "correct": "type_a", "explanation": "En Swift, la sintaxis para un switch case es 'switch value { case x: ... }', sin par\u00e9ntesis.", "created_by": "SwiftBeta_"}, {"id": 6, "name": "\u00bfQu\u00e9 palabra clave se utiliza para definir una propiedad computada en Swift?", "answers": [{"id": "type_a", "value": "calculate"}, {"id": "type_b", "value": "computed"}, {"id": "type_c", "value": "get"}, {"id": "type_d", "value": "set"}], "code": "class Circle {\n    var radius: Double\n    var area: Double {\n        get {\n            return Double.pi * radius * radius\n        }\n    }\n}", "gistURL": "https://gist.github.com/SwiftBeta/b230e4b1aaa7555c0bd0ed6c21b460e5.js", "correct": "type_c", "explanation": "En Swift, la palabra clave 'get' se utiliza para definir una propiedad computada.", "created_by": "SwiftBeta_"}, {"id": 7, "name": "\u00bfCu\u00e1l es la forma correcta de crear un clausura en Swift?", "answers": [{"id": "type_a", "value": "{ (param: Type) -> ReturnType in ... }"}, {"id": "type_b", "value": "func(param: Type) -> ReturnType { ... }"}, {"id": "type_c", "value": "(param: Type) -> ReturnType { ... }"}, {"id": "type_d", "value": "None of the above"}], "code": "let myClosure = { (a: Int, b: Int) -> Int in\n    return a + b\n}", "gistURL": "https://gist.github.com/SwiftBeta/c6adfde34194797b74c727a85dc49630.js", "correct": "type_a", "explanation": "En Swift, la sintaxis para crear una clausura es '{ (param: Type) -> ReturnType in ... }'", "created_by": "SwiftBeta_"}, {"id": 8, "name": "\u00bfCu\u00e1l es la forma correcta de declarar una funci\u00f3n que lanza una excepci\u00f3n en Swift?", "answers": [{"id": "type_a", "value": "func myFunction() throw -> ReturnType {}"}, {"id": "type_b", "value": "func myFunction() -> ReturnType throw {}"}, {"id": "type_c", "value": "func myFunction() throws -> ReturnType {}"}, {"id": "type_d", "value": "func myFunction() -> ReturnType throws {}"}], "code": "enum MyError: Error { case example }\nfunc myFunction() throws -> Int {\n    throw MyError.example\n}", "gistURL": "https://gist.github.com/SwiftBeta/e439699c402b8a8c419ce0e17f79253e.js", "correct": "type_c", "explanation": "En Swift, la sintaxis para declarar una funci\u00f3n que lanza una excepci\u00f3n es 'func myFunction() throws -> ReturnType {}'", "created_by": "SwiftBeta_"}, {"id": 9, "name": "\u00bfQu\u00e9 palabra clave se utiliza para definir una enumeraci\u00f3n en Swift?", "answers": [{"id": "type_a", "value": "enum"}, {"id": "type_b", "value": "enumeration"}, {"id": "type_c", "value": "Enum"}, {"id": "type_d", "value": "Enumeration"}], "code": "enum Direction {\n    case north, south, east, west\n}", "gistURL": "https://gist.github.com/SwiftBeta/862ee7ac656a86e11300962617a13126.js", "correct": "type_a", "explanation": "En Swift, la palabra clave 'enum' se utiliza para definir una enumeraci\u00f3n.", "created_by": "SwiftBeta_"}]}