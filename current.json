{"data": [{"id": 0, "name": "\u00bfQu\u00e9 es SwiftUI?", "answers": [{"id": "type_a", "value": "Un lenguaje de programaci\u00f3n"}, {"id": "type_b", "value": "Un framework de Apple para construir interfaces de usuario"}, {"id": "type_c", "value": "Un editor de c\u00f3digo"}, {"id": "type_d", "value": "Un sistema operativo de Apple"}], "code": "let button = Button(\"Click me\") {}", "gistURL": "https://gist.github.com/SwiftBeta/7502246cf06dfab9081b63f96ece215f.js", "correct": "type_b", "explanation": "SwiftUI es un framework de Apple para construir interfaces de usuario.", "created_by": "SwiftBeta_"}, {"id": 1, "name": "\u00bfQu\u00e9 diferencia a Swift de otros lenguajes de programaci\u00f3n?", "answers": [{"id": "type_a", "value": "Swift es un lenguaje interpretado mientras que otros son compilados"}, {"id": "type_b", "value": "Swift es un lenguaje de programaci\u00f3n multiplataforma"}, {"id": "type_c", "value": "Swift es seguro por defecto, previene errores comunes"}, {"id": "type_d", "value": "Swift no permite la programaci\u00f3n orientada a objetos"}], "code": "let name: String = \"Swift\"", "gistURL": "https://gist.github.com/SwiftBeta/875bef1f956a734427d458c3d5d42bee.js", "correct": "type_c", "explanation": "Swift es seguro por defecto, previene errores comunes.", "created_by": "SwiftBeta_"}, {"id": 2, "name": "\u00bfQu\u00e9 es Combine en Swift?", "answers": [{"id": "type_a", "value": "Un framework para trabajar con redes sociales"}, {"id": "type_b", "value": "Un sistema de integraci\u00f3n continua para proyectos en Swift"}, {"id": "type_c", "value": "Un framework para trabajar con programaci\u00f3n asincr\u00f3nica"}, {"id": "type_d", "value": "Un editor de texto para programar en Swift"}], "code": "let publisher = [1, 2, 3].publisher()\nlet subscriber = Subscribers.Sink<Int, Never> { value in\n    print(value)\n}", "gistURL": "https://gist.github.com/SwiftBeta/31c454b15d44875a0ee5062f39c18a51.js", "correct": "type_c", "explanation": "Combine en Swift es un framework para trabajar con programaci\u00f3n asincr\u00f3nica.", "created_by": "SwiftBeta_"}, {"id": 3, "name": "\u00bfQu\u00e9 es Xcode?", "answers": [{"id": "type_a", "value": "Un sistema operativo de Apple"}, {"id": "type_b", "value": "Un lenguaje de programaci\u00f3n creado por Apple"}, {"id": "type_c", "value": "Un editor de texto para programar en Swift"}, {"id": "type_d", "value": "Un IDE para desarrollar aplicaciones en Swift y otros lenguajes de programaci\u00f3n de Apple"}], "code": "", "gistURL": "", "correct": "type_d", "explanation": "Xcode es un IDE para desarrollar aplicaciones en Swift y otros lenguajes de programaci\u00f3n de Apple.", "created_by": "SwiftBeta_"}, {"id": 4, "name": "\u00bfCu\u00e1l es la funci\u00f3n del m\u00e9todo viewDidLoad() en UIKit?", "answers": [{"id": "type_a", "value": "Cargar la vista en la memoria"}, {"id": "type_b", "value": "Configurar la vista antes de que se muestre en pantalla"}, {"id": "type_c", "value": "Recibir informaci\u00f3n de la vista antes de cargarla"}, {"id": "type_d", "value": "Eliminar la vista de la memoria"}], "code": "override func viewDidLoad() {\n    super.viewDidLoad()\n    // Configurar la vista aqu\u00ed\n}", "gistURL": "https://gist.github.com/SwiftBeta/1d6f6fd8c55b76afa949b3fdcacef37e.js", "correct": "type_b", "explanation": "La funci\u00f3n del m\u00e9todo viewDidLoad() en UIKit es configurar la vista antes de que se muestre en pantalla.", "created_by": "SwiftBeta_"}, {"id": 5, "name": "\u00bfQu\u00e9 es el patr\u00f3n de dise\u00f1o MVC?", "answers": [{"id": "type_a", "value": "Un modelo de programaci\u00f3n basado en etiquetas"}, {"id": "type_b", "value": "Un patr\u00f3n de dise\u00f1o para separar la l\u00f3gica de la aplicaci\u00f3n en tres componentes: modelo, vista y controlador"}, {"id": "type_c", "value": "Un patr\u00f3n de dise\u00f1o para crear interfaces gr\u00e1ficas de usuario"}, {"id": "type_d", "value": "Un patr\u00f3n de dise\u00f1o para programaci\u00f3n asincr\u00f3nica"}], "code": "class ViewController: UIViewController {\n    var model: Model\n    var view: View\n    var controller: Controller\n\n    init() {\n        self.model = Model()\n        self.view = View()\n        self.controller = Controller()\n    }\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.backgroundColor = .white\n        view.addSubview(controller.button)\n    }\n}", "gistURL": "https://gist.github.com/SwiftBeta/aff2396ee34841e7631932315c5af7a9.js", "correct": "type_b", "explanation": "El patr\u00f3n de dise\u00f1o MVC (Model-View-Controller) es para separar la l\u00f3gica de la aplicaci\u00f3n en tres componentes: modelo, vista y controlador.", "created_by": "SwiftBeta_"}, {"id": 6, "name": "\u00bfQu\u00e9 es el patr\u00f3n de dise\u00f1o Delegate?", "answers": [{"id": "type_a", "value": "Un patr\u00f3n de dise\u00f1o para crear interfaces gr\u00e1ficas de usuario"}, {"id": "type_b", "value": "Un patr\u00f3n de dise\u00f1o para programaci\u00f3n asincr\u00f3nica"}, {"id": "type_c", "value": "Un patr\u00f3n de dise\u00f1o para comunicar objetos entre s\u00ed"}, {"id": "type_d", "value": "Un patr\u00f3n de dise\u00f1o para crear animaciones en la interfaz de usuario"}], "code": "protocol MyDelegate {\n    func didTapButton()\n}\n\nclass ViewController: UIViewController {\n    var delegate: MyDelegate?\n\n    @IBAction func buttonTapped() {\n        delegate?.didTapButton()\n    }\n}", "gistURL": "https://gist.github.com/SwiftBeta/7d579cf2b48f16dcf6f06c43848b9e71.js", "correct": "type_c", "explanation": "El patr\u00f3n de dise\u00f1o Delegate es para comunicar objetos entre s\u00ed.", "created_by": "SwiftBeta_"}, {"id": 7, "name": "\u00bfQu\u00e9 es un closure?", "answers": [{"id": "type_a", "value": "Un m\u00e9todo que retorna un resultado"}, {"id": "type_b", "value": "Un objeto que encapsula funciones y datos"}, {"id": "type_c", "value": "Un tipo de variable para almacenar datos"}, {"id": "type_d", "value": "Un tipo especial de funci\u00f3n sin nombre que puede capturar los valores de su entorno"}], "code": "let add = { (a: Int, b: Int) -> Int in\n    return a + b\n}", "gistURL": "https://gist.github.com/SwiftBeta/020fb9b1e50404a2ad26b9910ebd5e20.js", "correct": "type_d", "explanation": "Un closure es un tipo especial de funci\u00f3n sin nombre que puede capturar los valores de su entorno.", "created_by": "SwiftBeta_"}, {"id": 8, "name": "\u00bfQu\u00e9 es el patr\u00f3n de dise\u00f1o Factory?", "answers": [{"id": "type_a", "value": "Un patr\u00f3n de dise\u00f1o para comunicar objetos entre s\u00ed"}, {"id": "type_b", "value": "Un patr\u00f3n de dise\u00f1o para crear objetos sin exponer la l\u00f3gica de creaci\u00f3n"}, {"id": "type_c", "value": "Un patr\u00f3n de dise\u00f1o para crear animaciones en la interfaz de usuario"}, {"id": "type_d", "value": "Un patr\u00f3n de dise\u00f1o para programaci\u00f3n asincr\u00f3nica"}], "code": "protocol Animal {\n    func makeSound()\n}\n\nclass Dog: Animal {\n    func makeSound() {\n        print(\"Woof\")\n    }\n}\n\nclass Cat: Animal {\n    func makeSound() {\n        print(\"Meow\")\n    }\n}\n\nclass AnimalFactory {\n    static func createAnimal(type: String) -> Animal {\n        switch type {\n        case \"dog\":\n            return Dog()\n        case \"cat\":\n            return Cat()\n        default:\n            return Dog()\n        }\n    }\n}", "gistURL": "https://gist.github.com/SwiftBeta/55f5b8857ef62e56eaa7827e3ac740b5.js", "correct": "type_b", "explanation": "El patr\u00f3n de dise\u00f1o Factory es para crear objetos sin exponer la l\u00f3gica de creaci\u00f3n.", "created_by": "SwiftBeta_"}, {"id": 9, "name": "\u00bfQu\u00e9 es un protocolo en Swift?", "answers": [{"id": "type_a", "value": "Un conjunto de funciones para crear interfaces gr\u00e1ficas de usuario"}, {"id": "type_b", "value": "Un objeto que encapsula funciones y datos"}, {"id": "type_c", "value": "Un tipo de variable para almacenar datos"}, {"id": "type_d", "value": "Un conjunto de m\u00e9todos y propiedades que describe lo que un objeto debe hacer"}], "code": "protocol MyProtocol {\n    var myProperty: String { get set }\n    func myMethod()\n}\n\nclass MyClass: MyProtocol {\n    var myProperty = \"\"\n    func myMethod() {\n        print(myProperty)\n    }\n}", "gistURL": "https://gist.github.com/SwiftBeta/7e25544eca37008ba854c82ae80ec27c.js", "correct": "type_d", "explanation": "Un protocolo en Swift es un conjunto de m\u00e9todos y propiedades que describe lo que un objeto debe hacer.", "created_by": "SwiftBeta_"}]}