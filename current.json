{"data": [{"id": 0, "name": "C\u00f3mo crear\u00edas un ObservableObject?", "answers": [{"id": "type_a", "value": "class MyObject: ObservableObject {}"}, {"id": "type_b", "value": "struct MyObject: ObservableObject {}"}, {"id": "type_c", "value": "let myObject = ObservableObject()"}, {"id": "type_d", "value": "func observableObject() -> MyObject"}], "code": "import Combine\n\n//ObservableObject code", "gistURL": "https://gist.github.com/SwiftBeta/32977d99b5aca9672c8e0640aac30dce.js", "correct": "type_a", "explanation": "Un ObservableObject debe ser declarado como una clase, no como una struct, let o funci\u00f3n.", "created_by": "SwiftBeta_"}, {"id": 1, "name": "C\u00f3mo podr\u00edas saber si una cadena de caracteres contiene solo n\u00fameros en Swift?", "answers": [{"id": "type_a", "value": "string.filter { $0.isNumber }.count == string.count"}, {"id": "type_b", "value": "string.contains(where: { $0.isNumber })"}, {"id": "type_c", "value": "string.allSatisfy { $0.isNumber }"}, {"id": "type_d", "value": "string.containsNumbers()"}], "code": "let string: String = \"123\"\n\n//Verification code", "gistURL": "https://gist.github.com/SwiftBeta/37f80de1935170ada51b5ac70367d546.js", "correct": "type_c", "explanation": "El m\u00e9todo allSatisfy determina si todos los elementos en la cadena satisfacen la condici\u00f3n de ser n\u00fameros.", "created_by": "SwiftBeta_"}, {"id": 2, "name": "Cu\u00e1l es la sintaxis correcta para declarar una Enum en Swift?", "answers": [{"id": "type_a", "value": "enum Days { case monday, tuesday }"}, {"id": "type_b", "value": "enum Days { .monday, .tuesday }"}, {"id": "type_c", "value": "enum Days: { case monday, tuesday }"}, {"id": "type_d", "value": "enum Days = .monday, .tuesday"}], "code": "", "gistURL": "", "correct": "type_a", "explanation": "La sintaxis correcta para declarar un Enum en Swift es 'enum Nombre { case valor1, valor2 }'.", "created_by": "SwiftBeta_"}, {"id": 3, "name": "Qu\u00e9 patr\u00f3n de dise\u00f1o se utiliza para separar la l\u00f3gica de negocio de la l\u00f3gica en la vista?", "answers": [{"id": "type_a", "value": "Singleton"}, {"id": "type_b", "value": "MainThread"}, {"id": "type_c", "value": "Factory"}, {"id": "type_d", "value": "Model-View-ViewModel (MVVM)"}], "code": "", "gistURL": "", "correct": "type_d", "explanation": "El patr\u00f3n de dise\u00f1o Model-View-ViewModel (MVVM) se utiliza para separar la l\u00f3gica de negocio y la vista.", "created_by": "SwiftBeta_"}, {"id": 4, "name": "Qu\u00e9 output obtendremos con el siguiente c\u00f3digo?", "answers": [{"id": "type_a", "value": "Compiler Error"}, {"id": "type_b", "value": "m2 () called!"}, {"id": "type_c", "value": "m1 () called!"}, {"id": "type_d", "value": "m1 () called! m2() called!"}], "code": "protocol MyProtocol {\n    func m1()\n}\n\nextension MyProtocol {\n    func m1() { print(\"m1 () called!\") }\n    func m2() { print(\"m2 () called!\") }\n}\n\nclass MyClass: MyProtocol {\n    func m1() { print(\"m1 () called!\") }\n}\n\nlet myInstance = MyClass()\nmyInstance.m1()\nmyInstance.m2()", "gistURL": "https://gist.github.com/SwiftBeta/d8685618432e69ee0643d92af91e7111.js", "correct": "type_c", "explanation": "El c\u00f3digo compila correctamente, pero m2() no est\u00e1 disponible en 'MyClass' porque solo se hereda de la extensi\u00f3n si tambi\u00e9n se declara en el protocolo.", "created_by": "SwiftBeta_"}, {"id": 5, "name": "C\u00f3mo se crea un @Published property wrapper en Combine?", "answers": [{"id": "type_a", "value": "@Published let myValue = 0"}, {"id": "type_b", "value": "@Published var myValue = 0"}, {"id": "type_c", "value": "Published var myValue = 0"}, {"id": "type_d", "value": "let myValue = Published(0)"}], "code": "import Combine\n\n//Create a Published property wrapper", "gistURL": "https://gist.github.com/SwiftBeta/e7bfde0b927338f61bca3600aa34ef6e.js", "correct": "type_b", "explanation": "Un @Published property wrapper se crea utilizando la sintaxis @Published var nombreDeLaVariable = valorInicial.", "created_by": "SwiftBeta_"}, {"id": 6, "name": "Qu\u00e9 m\u00e9todo es utilizado para eliminar elementos duplicados de un array en Swift?", "answers": [{"id": "type_a", "value": "removeDuplicates()"}, {"id": "type_b", "value": "unique()"}, {"id": "type_c", "value": "distinct()"}, {"id": "type_d", "value": "Array(Set(array))"}], "code": "let array = [1, 2, 2, 3, 4, 4, 4]\n\n//Remove duplicates", "gistURL": "https://gist.github.com/SwiftBeta/db6a22dcf7bfe9e4cc647fe4d4ce1b3a.js", "correct": "type_d", "explanation": "Podemos eliminar elementos duplicados de un array en Swift utilizando la sintaxis Array(Set(array)).", "created_by": "SwiftBeta_"}, {"id": 7, "name": "C\u00f3mo se marca una funci\u00f3n como obsoleta (deprecated) en Swift?", "answers": [{"id": "type_a", "value": "@available(*, deprecated)"}, {"id": "type_b", "value": "@deprecated()"}, {"id": "type_c", "value": "DEPRECATED()"}, {"id": "type_d", "value": "@available(*, available)"}], "code": "", "gistURL": "", "correct": "type_a", "explanation": "Para marcar una funci\u00f3n como obsoleta en Swift, utilizamos la sintaxis @available(*, deprecated) antes de la declaraci\u00f3n de la funci\u00f3n.", "created_by": "SwiftBeta_"}, {"id": 8, "name": "Cu\u00e1l de las siguientes opciones se utiliza para declarar propiedades computadas en Swift?", "answers": [{"id": "type_a", "value": "func myProperty() -> Int {}"}, {"id": "type_b", "value": "var myProperty = {}"}, {"id": "type_c", "value": "var myProperty = -> Int {}"}, {"id": "type_d", "value": "var myProperty: Int { return 0 }"}], "code": "", "gistURL": "", "correct": "type_d", "explanation": "Las propiedades computadas en Swift se declaran utilizando la sintaxis 'var nombreDeLaPropiedad: Tipo { return valor }'.", "created_by": "SwiftBeta_"}, {"id": 9, "name": "En SwiftUI, \u00bfqu\u00e9 podemos utilizar para aplicar una cantidad espec\u00edfica de espacio entre la barra superior (notch) y nuestro contenido?", "answers": [{"id": "type_a", "value": ".topPadding()"}, {"id": "type_b", "value": ".safeAreaInsets(.top)"}, {"id": "type_c", "value": ".padding(.top, 50)"}, {"id": "type_d", "value": ".padding(.safeArea)"}], "code": "import SwiftUI\n\n//Apply padding to content", "gistURL": "https://gist.github.com/SwiftBeta/1454524cc5077a1f25efd58b9390a914.js", "correct": "type_c", "explanation": "En SwiftUI, podemos utilizar .padding(.top, cantidadDeEspacio) para aplicar una cantidad espec\u00edfica de espacio entre la barra superior (notch) y nuestro contenido.", "created_by": "SwiftBeta_"}]}