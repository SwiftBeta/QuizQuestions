{"data": [{"id": 0, "name": "\u00bfCu\u00e1l es la forma correcta de declarar una variable opcional en Swift?", "answers": [{"id": "type_a", "value": "var myVar: String?"}, {"id": "type_b", "value": "var myVar: Optional<String>"}, {"id": "type_c", "value": "var myVar: String!"}, {"id": "type_d", "value": "Todas las anteriores"}], "code": "var myVar1: String?\nvar myVar2: Optional<String>\nvar myVar3: String!", "gistURL": "https://gist.github.com/SwiftBeta/445cc9f803574e33be3d3b76d08abe8a.js", "correct": "type_d", "explanation": "Todas las opciones son formas v\u00e1lidas de declarar una variable opcional en Swift.", "created_by": "SwiftBeta_"}, {"id": 1, "name": "\u00bfCu\u00e1l es la forma correcta de usar un guard let en Swift?", "answers": [{"id": "type_a", "value": "Usar guard let para desempaquetar un opcional"}, {"id": "type_b", "value": "Usar guard let para verificar una condici\u00f3n"}, {"id": "type_c", "value": "Usar guard let para ejecutar un bloque de c\u00f3digo si la condici\u00f3n es falsa"}, {"id": "type_d", "value": "Usar guard let para ejecutar un bloque de c\u00f3digo si la condici\u00f3n es verdadera"}], "code": "func myFunction(optionalValue: String?) {\n    guard let value = optionalValue else {\n        return\n    }\n    print(value)\n}", "gistURL": "https://gist.github.com/SwiftBeta/581efaa49db3a0dc9f64963a34957685.js", "correct": "type_a", "explanation": "El guard let se utiliza para desempaquetar un opcional y ejecutar un bloque de c\u00f3digo si el opcional es nil.", "created_by": "SwiftBeta_"}, {"id": 2, "name": "\u00bfCu\u00e1l es la forma correcta de declarar una vista personalizada en SwiftUI?", "answers": [{"id": "type_a", "value": "struct MyView: View"}, {"id": "type_b", "value": "class MyView: View"}, {"id": "type_c", "value": "struct MyView: UIView"}, {"id": "type_d", "value": "class MyView: UIView"}], "code": "import SwiftUI\n\nstruct MyView: View {\n    var body: some View {\n        Text(\"Hello, World!\")\n    }\n}", "gistURL": "https://gist.github.com/SwiftBeta/e4af864aa1e26bc02f24f3b40ddeeab4.js", "correct": "type_a", "explanation": "En SwiftUI, las vistas personalizadas se declaran como estructuras que conforman el protocolo View.", "created_by": "SwiftBeta_"}, {"id": 3, "name": "\u00bfCu\u00e1l es la forma correcta de crear un @State en SwiftUI?", "answers": [{"id": "type_a", "value": "@State private var myValue: Int"}, {"id": "type_b", "value": "@State var myValue: Int"}, {"id": "type_c", "value": "@State let myValue: Int"}, {"id": "type_d", "value": "@State public var myValue: Int"}], "code": "import SwiftUI\n\nstruct MyView: View {\n    @State private var myValue: Int = 0\n\n    var body: some View {\n        Text(\"Value: \\(myValue)\")\n    }\n}", "gistURL": "https://gist.github.com/SwiftBeta/c4a117f185c8cecccb0bdb0d3688b662.js", "correct": "type_a", "explanation": "La forma correcta de crear un @State en SwiftUI es declararlo como una variable privada con la anotaci\u00f3n @State.", "created_by": "SwiftBeta_"}, {"id": 4, "name": "\u00bfCu\u00e1l es la forma correcta de crear un delegado en UIKit?", "answers": [{"id": "type_a", "value": "Usar un protocolo y asignar el delegado a una propiedad"}, {"id": "type_b", "value": "Usar una funci\u00f3n de callback"}, {"id": "type_c", "value": "Usar una closure"}, {"id": "type_d", "value": "Usar NotificationCenter"}], "code": "", "gistURL": "", "correct": "type_a", "explanation": "La forma correcta de crear un delegado en UIKit es usando un protocolo y asignando el delegado a una propiedad.", "created_by": "SwiftBeta_"}, {"id": 5, "name": "\u00bfCu\u00e1l es la forma correcta de crear una vista personalizada en UIKit?", "answers": [{"id": "type_a", "value": "Subclass UIView"}, {"id": "type_b", "value": "Subclass UIViewController"}, {"id": "type_c", "value": "Subclass UILabel"}, {"id": "type_d", "value": "Subclass UIButton"}], "code": "import UIKit\n\nclass MyView: UIView {\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n    }\n\n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n    }\n}", "gistURL": "https://gist.github.com/SwiftBeta/62d4ca60e07234f170b3ea0d4d53be9f.js", "correct": "type_a", "explanation": "La forma correcta de crear una vista personalizada en UIKit es subclasificar UIView.", "created_by": "SwiftBeta_"}]}