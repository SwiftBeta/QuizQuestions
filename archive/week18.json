{"data": [{"id": 0, "name": "\u00bfCu\u00e1l es la sintaxis correcta para definir una estructura en Swift?", "answers": [{"id": "type_a", "value": "struct MyStruct {}"}, {"id": "type_b", "value": "class MyStruct {}"}, {"id": "type_c", "value": "enum MyStruct {}"}, {"id": "type_d", "value": "func MyStruct {}"}], "code": "struct MyStruct {\n    var property: String\n}", "gistURL": "https://gist.github.com/SwiftBeta/935a55988ff3c6bdb0e2870a4b92e745.js", "correct": "type_a", "explanation": "En Swift, las estructuras se definen utilizando la palabra clave 'struct'.", "created_by": "SwiftBeta_"}, {"id": 1, "name": "\u00bfC\u00f3mo se crea una vista personalizada en SwiftUI?", "answers": [{"id": "type_a", "value": "Heredando de la clase UIView"}, {"id": "type_b", "value": "Heredando de la clase UIViewController"}, {"id": "type_c", "value": "Conformando al protocolo View"}, {"id": "type_d", "value": "Conformando al protocolo UIViewController"}], "code": "struct MyCustomView: View {\n    var body: some View {\n        Text(\"Hello, World!\")\n    }\n}", "gistURL": "https://gist.github.com/SwiftBeta/c400106bd6e25d2f8d975ba84be112b1.js", "correct": "type_c", "explanation": "En SwiftUI, se crea una vista personalizada conformando al protocolo View y proporcionando una implementaci\u00f3n para la propiedad 'body'.", "created_by": "SwiftBeta_"}, {"id": 2, "name": "\u00bfCu\u00e1l de las siguientes opciones es una forma v\u00e1lida de crear un IBOutlet en UIKit?", "answers": [{"id": "type_a", "value": "@IBOutlet var label: UILabel!"}, {"id": "type_b", "value": "@IBOutlet let label: UILabel!"}, {"id": "type_c", "value": "@IBOutlet weak var label: UILabel!"}, {"id": "type_d", "value": "@IBOutlet weak let label: UILabel!"}], "code": "class MyViewController: UIViewController {\n    @IBOutlet weak var label: UILabel!\n}", "gistURL": "https://gist.github.com/SwiftBeta/f96cd34129f5d7f974d2b0fd3dc1a20d.js", "correct": "type_c", "explanation": "En UIKit, se crea un IBOutlet utilizando la anotaci\u00f3n @IBOutlet y declarando la propiedad como 'weak var'.", "created_by": "SwiftBeta_"}, {"id": 3, "name": "\u00bfCu\u00e1l es la forma correcta de declarar una funci\u00f3n que devuelve un valor opcional en Swift?", "answers": [{"id": "type_a", "value": "func myFunction() -> String?"}, {"id": "type_b", "value": "func myFunction() -> Optional<String>"}, {"id": "type_c", "value": "func myFunction() -> String!"}, {"id": "type_d", "value": "func myFunction() -> String"}], "code": "func myFunction() -> String? {\n    return \"Hello, World!\"\n}", "gistURL": "https://gist.github.com/SwiftBeta/2de6bc48fb0ac812c4324b703a76df00.js", "correct": "type_a", "explanation": "En Swift, se declara una funci\u00f3n que devuelve un valor opcional utilizando el s\u00edmbolo '?' despu\u00e9s del tipo de retorno.", "created_by": "SwiftBeta_"}, {"id": 4, "name": "\u00bfCu\u00e1l de las siguientes opciones es una forma v\u00e1lida de crear un delegado en Swift?", "answers": [{"id": "type_a", "value": "protocol MyDelegate: AnyObject {}"}, {"id": "type_b", "value": "protocol MyDelegate: class {}"}, {"id": "type_c", "value": "protocol MyDelegate: NSObject {}"}, {"id": "type_d", "value": "protocol MyDelegate: UIViewController {}"}], "code": "protocol MyDelegate: AnyObject {\n    func myFunction()\n}\n\nclass MyClass {\n    weak var delegate: MyDelegate?\n}", "gistURL": "https://gist.github.com/SwiftBeta/07f3518997edb8d8a530e0d1f5b44983.js", "correct": "type_a", "explanation": "En Swift, se crea un delegado utilizando un protocolo que hereda de AnyObject y declarando una propiedad 'weak' para mantener una referencia al delegado.", "created_by": "SwiftBeta_"}, {"id": 5, "name": "\u00bfCu\u00e1l es la forma correcta de utilizar un modificador en SwiftUI?", "answers": [{"id": "type_a", "value": "Text(\"Hello, World!\").modifier(.font(.largeTitle))"}, {"id": "type_b", "value": "Text(\"Hello, World!\").modifier(Font.largeTitle)"}, {"id": "type_c", "value": "Text(\"Hello, World!\").font(.largeTitle)"}, {"id": "type_d", "value": "Text(\"Hello, World!\").font(Font.largeTitle)"}], "code": "struct ContentView: View {\n    var body: some View {\n        Text(\"Hello, World!\").font(.largeTitle)\n    }\n}", "gistURL": "https://gist.github.com/SwiftBeta/b91db1f35d318432fb82c7820b6aec2a.js", "correct": "type_c", "explanation": "En SwiftUI, se utiliza un modificador llamando directamente al m\u00e9todo del modificador en la vista, como 'font(.largeTitle)'.", "created_by": "SwiftBeta_"}]}