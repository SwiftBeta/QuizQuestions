{"data": [{"id": 0, "name": "\u00bfCu\u00e1l es la sintaxis correcta para crear una estructura SwiftUI?", "answers": [{"id": "type_a", "value": "struct ContentView: View()"}, {"id": "type_b", "value": "struct ContentView: View {}"}, {"id": "type_c", "value": "struct ContentView extends View {}"}, {"id": "type_d", "value": "struct ContentView <View> {}"}], "code": "struct ContentView: View {}", "gistURL": "https://gist.github.com/SwiftBeta/ae5e14b5148c677cd926fe28f1ab3cb1.js", "correct": "type_b", "explanation": "La sintaxis correcta para crear una estructura SwiftUI es: struct ContentView: View {}", "created_by": "SwiftBeta_"}, {"id": 1, "name": "\u00bfQu\u00e9 funci\u00f3n SwiftUI se utiliza para actualizar el estado de una variable?", "answers": [{"id": "type_a", "value": "@State"}, {"id": "type_b", "value": "@Binding"}, {"id": "type_c", "value": "@Published"}, {"id": "type_d", "value": "@ObservedObject"}], "code": "@State private var isPresented: Bool = false", "gistURL": "https://gist.github.com/SwiftBeta/6016df3dc862f6b27d7bd73c074be086.js", "correct": "type_a", "explanation": "Usamos @State para marcar una variable como fuente \u00fanica de verdad y SwiftUI lo actualizar\u00e1 autom\u00e1ticamente cuando se modifique.", "created_by": "SwiftBeta_"}, {"id": 2, "name": "\u00bfCu\u00e1l es la funci\u00f3n del operador $ en SwiftUI?", "answers": [{"id": "type_a", "value": "Indica una variable de tipo Binding"}, {"id": "type_b", "value": "Multiplica dos variables"}, {"id": "type_c", "value": "Es una referencia al self en closures"}, {"id": "type_d", "value": "No existe tal operador en SwiftUI"}], "code": "Toggle(isOn: $isPresented) { ... }", "gistURL": "https://gist.github.com/SwiftBeta/43f8212fbeed9e1e6b5f8cbcc68dd684.js", "correct": "type_a", "explanation": "El operador $ en SwiftUI indica una variable de tipo Binding, permitiendo que se actualice entre vistas.", "created_by": "SwiftBeta_"}, {"id": 3, "name": "\u00bfQu\u00e9 es el m\u00e9todo sink(recieveValue:) en Combine?", "answers": [{"id": "type_a", "value": "Iniciar sesi\u00f3n con una cuenta"}, {"id": "type_b", "value": "Pausar el flujo de datos"}, {"id": "type_c", "value": "Suscribirse y recibir valores de un publisher"}, {"id": "type_d", "value": "Cerrar un archivo para liberar recursos"}], "code": "let cancellable = publisher.sink { ... }", "gistURL": "https://gist.github.com/SwiftBeta/edff49ae2c32584f0bd39f103f472ae5.js", "correct": "type_c", "explanation": "El m\u00e9todo sink(recieveValue:) es un subscriber en Combine que permite suscribirse y recibir los valores de un publisher.", "created_by": "SwiftBeta_"}, {"id": 4, "name": "En UIKit, \u00bfqu\u00e9 m\u00e9todo se usa com\u00fanmente para dise\u00f1ar y agregar subvistas?", "answers": [{"id": "type_a", "value": "viewDidLoad"}, {"id": "type_b", "value": "viewWillAppear"}, {"id": "type_c", "value": "viewWillDisappear"}, {"id": "type_d", "value": "viewDidDisappear"}], "code": "override func viewDidLoad() { ... }", "gistURL": "https://gist.github.com/SwiftBeta/095312ae60bfc680fbab486df2a8f636.js", "correct": "type_a", "explanation": "En UIKit, el m\u00e9todo viewDidLoad() se utiliza con frecuencia para dise\u00f1ar y agregar subvistas al controlador de vistas.", "created_by": "SwiftBeta_"}]}