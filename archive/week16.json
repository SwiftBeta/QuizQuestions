{"data": [{"id": 0, "name": "\u00bfCu\u00e1l es la sintaxis correcta para definir una funci\u00f3n en Swift?", "answers": [{"id": "type_a", "value": "func functionName() -> returnType {}"}, {"id": "type_b", "value": "function functionName() -> returnType {}"}, {"id": "type_c", "value": "func functionName() returnType {}"}, {"id": "type_d", "value": "function functionName() returnType {}"}], "code": "func exampleFunction() -> String {\n    return \"Hello, World!\"\n}", "gistURL": "https://gist.github.com/SwiftBeta/79886fafac3ceabbb8a0dd3bb68577f1.js", "correct": "type_a", "explanation": "En Swift, las funciones se definen utilizando la palabra clave 'func', seguida del nombre de la funci\u00f3n, par\u00e1metros y tipo de retorno.", "created_by": "SwiftBeta_"}, {"id": 1, "name": "\u00bfQu\u00e9 hace el siguiente c\u00f3digo en SwiftUI?", "answers": [{"id": "type_a", "value": "Crea un bot\u00f3n con un texto y una acci\u00f3n"}, {"id": "type_b", "value": "Crea un texto con un tap gesture"}, {"id": "type_c", "value": "Crea un bot\u00f3n con una imagen y una acci\u00f3n"}, {"id": "type_d", "value": "Crea un texto con un long press gesture"}], "code": "Button(action: {\n    print(\"Button tapped\")\n}) {\n    Text(\"Tap me\")\n}", "gistURL": "https://gist.github.com/SwiftBeta/55915cc5af2847e0d6c19ef7b4eb3fa0.js", "correct": "type_a", "explanation": "Este c\u00f3digo crea un bot\u00f3n en SwiftUI con un texto 'Tap me' y una acci\u00f3n que imprime 'Button tapped' en la consola cuando se presiona el bot\u00f3n.", "created_by": "SwiftBeta_"}, {"id": 2, "name": "\u00bfCu\u00e1l es la forma correcta de declarar una variable opcional en Swift?", "answers": [{"id": "type_a", "value": "var variableName: Optional<Type>"}, {"id": "type_b", "value": "var variableName: Type?"}, {"id": "type_c", "value": "var variableName: Type!"}, {"id": "type_d", "value": "var variableName: Type"}], "code": "var optionalString: String?", "gistURL": "https://gist.github.com/SwiftBeta/7b7e658e709f46f914d35f84e1deda23.js", "correct": "type_b", "explanation": "En Swift, las variables opcionales se declaran usando un '?' despu\u00e9s del tipo de dato. Esto indica que la variable puede contener un valor o ser nil.", "created_by": "SwiftBeta_"}, {"id": 3, "name": "\u00bfCu\u00e1l es la forma correcta de desempaquetar un opcional en Swift?", "answers": [{"id": "type_a", "value": "forced unwrapping"}, {"id": "type_b", "value": "optional binding"}, {"id": "type_c", "value": "optional chaining"}, {"id": "type_d", "value": "nil coalescing"}], "code": "if let unwrappedValue = optionalValue {\n    print(unwrappedValue)\n}", "gistURL": "https://gist.github.com/SwiftBeta/b6ffff0ec1ca743d740c627373e6edee.js", "correct": "type_b", "explanation": "El 'optional binding' es la forma correcta y segura de desempaquetar un opcional en Swift. Utiliza la declaraci\u00f3n 'if let' para desempaquetar el valor solo si no es nil.", "created_by": "SwiftBeta_"}, {"id": 4, "name": "\u00bfQu\u00e9 hace el siguiente c\u00f3digo en UIKit?", "answers": [{"id": "type_a", "value": "Crea un UILabel con un texto"}, {"id": "type_b", "value": "Crea un UIButton con un t\u00edtulo"}, {"id": "type_c", "value": "Crea un UITextField con un placeholder"}, {"id": "type_d", "value": "Crea un UITextView con un texto"}], "code": "let label = UILabel()\nlabel.text = \"Hello, World!\"", "gistURL": "https://gist.github.com/SwiftBeta/054a5bcaf436193bcb92f9032d26469a.js", "correct": "type_a", "explanation": "Este c\u00f3digo crea un UILabel en UIKit y establece su propiedad 'text' en 'Hello, World!'.", "created_by": "SwiftBeta_"}, {"id": 5, "name": "\u00bfQu\u00e9 m\u00e9todo se utiliza para actualizar la interfaz de usuario en el hilo principal en Swift?", "answers": [{"id": "type_a", "value": "DispatchQueue.main.async"}, {"id": "type_b", "value": "DispatchQueue.main.sync"}, {"id": "type_c", "value": "DispatchQueue.global().async"}, {"id": "type_d", "value": "DispatchQueue.global().sync"}], "code": "DispatchQueue.main.async {\n    // Update UI\n}", "gistURL": "https://gist.github.com/SwiftBeta/762f9575c85a9db400cf2e4f381e1987.js", "correct": "type_a", "explanation": "Para actualizar la interfaz de usuario en el hilo principal en Swift, se utiliza 'DispatchQueue.main.async'. Esto garantiza que las actualizaciones de la interfaz de usuario se realicen de manera segura y eficiente.", "created_by": "SwiftBeta_"}]}