{"data": [{"id": 0, "name": "\u00bfCu\u00e1l es la diferencia entre un optional y un implicitly unwrapped optional en Swift?", "answers": [{"id": "type_a", "value": "Un optional puede ser nil, mientras que un implicitly unwrapped optional no puede ser nil"}, {"id": "type_b", "value": "Un optional debe ser unwrapped, mientras que un implicitly unwrapped optional no necesita unwrapping"}, {"id": "type_c", "value": "No hay diferencia entre ambos tipos"}, {"id": "type_d", "value": "Un implicitly unwrapped optional tiene un signo de exclamaci\u00f3n al final del tipo"}], "code": "", "gistURL": "", "correct": "type_b", "created_by": "SwiftBeta_"}, {"id": 1, "name": "\u00bfQu\u00e9 es MVVM y por qu\u00e9 es \u00fatil en el desarrollo de apps en Swift?", "answers": [{"id": "type_a", "value": "MVVM es un patr\u00f3n de dise\u00f1o que se utiliza para crear interfaces de usuario en Swift"}, {"id": "type_b", "value": "MVVM es una arquitectura de software que separa la l\u00f3gica de negocios de la interfaz de usuario"}, {"id": "type_c", "value": "MVVM es un framework de Apple para el desarrollo de apps en Swift"}, {"id": "type_d", "value": "MVVM es una forma de conectar la vista y el modelo de datos en una app en Swift"}], "code": "", "gistURL": "", "correct": "type_b", "created_by": "SwiftBeta_"}, {"id": 2, "name": "\u00bfC\u00f3mo se pueden hacer animaciones en SwiftUI?", "answers": [{"id": "type_a", "value": "Utilizando la clase UIViewAnimation"}, {"id": "type_b", "value": "Utilizando la clase Animation de SwiftUI"}, {"id": "type_c", "value": "Creando manualmente transiciones entre vistas"}, {"id": "type_d", "value": "No se pueden hacer animaciones en SwiftUI"}], "code": "", "gistURL": "", "correct": "type_b", "created_by": "SwiftBeta_"}, {"id": 3, "name": "\u00bfQu\u00e9 es un Publisher en Combine?", "answers": [{"id": "type_a", "value": "Un objeto que publica eventos sobre un flujo de datos"}, {"id": "type_b", "value": "Un objeto que se suscribe a un flujo de datos para recibir eventos"}, {"id": "type_c", "value": "Un objeto que combina m\u00faltiples fuentes de datos en uno solo"}, {"id": "type_d", "value": "Un objeto que conecta el modelo de datos con la vista en SwiftUI"}], "code": "", "gistURL": "", "correct": "type_a", "created_by": "SwiftBeta_"}, {"id": 4, "name": "\u00bfPara qu\u00e9 se utiliza la clase DispatchQueue en Swift?", "answers": [{"id": "type_a", "value": "Para crear hilos secundarios en una app en Swift"}, {"id": "type_b", "value": "Para sincronizar el acceso a recursos compartidos en una app en Swift"}, {"id": "type_c", "value": "Para hacer llamadas as\u00edncronas a una API en una app en Swift"}, {"id": "type_d", "value": "Para manejar notificaciones push en una app en Swift"}], "code": "", "gistURL": "", "correct": "type_b", "created_by": "SwiftBeta_"}, {"id": 5, "name": "\u00bfC\u00f3mo se puede implementar un patr\u00f3n de delegaci\u00f3n en una app en Swift?", "answers": [{"id": "type_a", "value": "Creando una clase que hereda de la clase Delegate en UIKit"}, {"id": "type_b", "value": "Creando un protocolo para el delegado y definiendo un m\u00e9todo para que el delegador utilice"}, {"id": "type_c", "value": "Creando una clase que hereda de la clase NSNotificationCenter en Swift"}, {"id": "type_d", "value": "Creando una clase que implementa la interfaz Delegate en SwiftUI"}], "code": "", "gistURL": "", "correct": "type_b", "created_by": "SwiftBeta_"}, {"id": 6, "name": "\u00bfQu\u00e9 es el patr\u00f3n Singleton en Swift y para qu\u00e9 se utiliza?", "answers": [{"id": "type_a", "value": "El patr\u00f3n Singleton es una forma de crear objetos en Swift de forma eficiente"}, {"id": "type_b", "value": "El patr\u00f3n Singleton es una forma de asegurar que solo hay una instancia de una clase en la memoria"}, {"id": "type_c", "value": "El patr\u00f3n Singleton es un patr\u00f3n de dise\u00f1o para crear interfaces de usuario en UIKit"}, {"id": "type_d", "value": "El patr\u00f3n Singleton es una forma de conectar la vista con el modelo de datos en una app en Swift"}], "code": "", "gistURL": "", "correct": "type_b", "created_by": "SwiftBeta_"}, {"id": 7, "name": "\u00bfC\u00f3mo se puede crear un array de objetos personalizados en Swift y luego ordenarlos de forma ascendente seg\u00fan un valor de propiedad?", "answers": [{"id": "type_a", "value": "Utilizando la clase Array y el m\u00e9todo sortedByProperty()"}, {"id": "type_b", "value": "Creando un diccionario con los objetos y el valor de propiedad como clave, y luego obteniendo las claves ordenadas"}, {"id": "type_c", "value": "Creando una clase que hereda de la clase Array y redefine el m\u00e9todo sort()"}, {"id": "type_d", "value": "Utilizando la clase NSSortDescriptor y pas\u00e1ndola como argumento al m\u00e9todo sorted() de la clase Array"}], "code": "class CustomObject {\n    var id: Int\n    var value: String\n    init(id: Int, value: String) {\n        self.id = id\n        self.value = value\n    }\n}\nlet objects = [CustomObject(id: 1, value: \"c\"), CustomObject(id: 3, value: \"a\"), CustomObject(id: 2, value: \"b\")]\nlet sortedObjects = objects.sorted { $0.id < $1.id }", "gistURL": "https://gist.github.com/271604a1500d0ee15fa54b3b2dfc15d9.js", "correct": "type_d", "created_by": "SwiftBeta_"}, {"id": 8, "name": "\u00bfC\u00f3mo se puede hacer que un bot\u00f3n tenga una acci\u00f3n en SwiftUI?", "answers": [{"id": "type_a", "value": "Utilizando la funci\u00f3n addTarget() en la clase Button de SwiftUI"}, {"id": "type_b", "value": "Definiendo una funci\u00f3n que se utilize como handler en el evento onTapGesture() del bot\u00f3n"}, {"id": "type_c", "value": "Utilizando la funci\u00f3n addGestureRecognizer() en la clase Button de SwiftUI"}, {"id": "type_d", "value": "Definiendo una funci\u00f3n que se utilize como handler en la propiedad action() del bot\u00f3n"}], "code": "", "gistURL": "", "correct": "type_b", "created_by": "SwiftBeta_"}, {"id": 9, "name": "\u00bfQu\u00e9 es el patr\u00f3n Factory en Swift y para qu\u00e9 se utiliza?", "answers": [{"id": "type_a", "value": "El patr\u00f3n Factory es una forma de crear objetos en Swift de forma eficiente"}, {"id": "type_b", "value": "El patr\u00f3n Factory es un patr\u00f3n de dise\u00f1o para crear interfaces de usuario en SwiftUI"}, {"id": "type_c", "value": "El patr\u00f3n Factory es una forma de asegurar que solo hay una instancia de una clase en la memoria"}, {"id": "type_d", "value": "El patr\u00f3n Factory es una forma de encapsular la creaci\u00f3n de objetos complejos en una clase separada"}], "code": "", "gistURL": "", "correct": "type_d", "created_by": "SwiftBeta_"}]}