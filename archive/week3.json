{"data": [{"id": 0, "name": "\u00bfQu\u00e9 es el framework SwiftUI y en qu\u00e9 se diferencia de UIKit?", "answers": [{"id": "type_a", "value": "SwiftUI es un framework declarativo mientras que UIKit es imperativo"}, {"id": "type_b", "value": "SwiftUI es para iOS mientras que UIKit es para macOS"}, {"id": "type_c", "value": "SwiftUI es obsoleto mientras que UIKit es actual"}, {"id": "type_d", "value": "SwiftUI es m\u00e1s dif\u00edcil de usar que UIKit"}], "code": "struct ContentView: View {\n    var body: some View {\n        Text(\"Hello, World!\")\n    }\n}\n\nstruct ContentView_Previews: PreviewProvider {\n    static var previews: some View {\n        ContentView()\n    }\n}", "gistURL": "", "correct": "type_a", "created_by": "SwiftBeta_"}, {"id": 1, "name": "\u00bfQu\u00e9 es Combine en Swift y cu\u00e1l es su finalidad?", "answers": [{"id": "type_a", "value": "Combine es un framework para programaci\u00f3n reactiva"}, {"id": "type_b", "value": "Combine es un framework para ejecutar c\u00f3digo concurrente"}, {"id": "type_c", "value": "Combine es un framework para trabajar con bases de datos"}, {"id": "type_d", "value": "Combine es un framework para hacer animaciones en la interfaz de usuario"}], "code": "struct ButtonState {\n    let title: String\n    let backgroundColor: Color\n}\n\nclass Model {\n    var buttonState = CurrentValueSubject<ButtonState, Never>(ButtonState(title: \"Tap me\", backgroundColor: .green))\n}\n\nstruct ContentView: View {\n    @ObservedObject var model = Model()\n\n    var body: some View {\n        Button(action: {\n            self.model.buttonState.value = ButtonState(title: \"Thank you\", backgroundColor: .blue)\n        }) {\n            Text(model.buttonState.value.title)\n                .padding()\n                .background(model.buttonState.value.backgroundColor)\n                .foregroundColor(.white)\n                .cornerRadius(10)\n        }\n    }\n}\n", "gistURL": "", "correct": "type_a", "created_by": "SwiftBeta_"}, {"id": 2, "name": "\u00bfC\u00f3mo se puede implementar un protocolo en una extensi\u00f3n en Swift?", "answers": [{"id": "type_a", "value": "No se puede implementar un protocolo en una extensi\u00f3n"}, {"id": "type_b", "value": "Se puede implementar un protocolo en una extensi\u00f3n siempre que dicho protocolo no sea de tipo asociado"}, {"id": "type_c", "value": "Se puede implementar un protocolo en una extensi\u00f3n pero solo si es de objeto"}, {"id": "type_d", "value": "Se puede implementar un protocolo en una extensi\u00f3n sin importar el tipo de protocolo"}], "code": "protocol ExampleProtocol {\n    var simpleDescription: String { get }\n    mutating func adjust()\n}\n\nextension Int: ExampleProtocol {\n    var simpleDescription: String { \"The number is \\(self)\" }\n    mutating func adjust() {\n        self += 42\n    }\n}\n", "gistURL": "", "correct": "type_b", "created_by": "SwiftBeta_"}, {"id": 3, "name": "\u00bfC\u00f3mo se puede crear un degradado en la interfaz de usuario en iOS?", "answers": [{"id": "type_a", "value": "Utilizando una imagen degradada"}, {"id": "type_b", "value": "Usando la clase GradientView"}, {"id": "type_c", "value": "Usando la clase CAGradientLayer"}, {"id": "type_d", "value": "Aplicando un filtro de Core Image a la vista"}], "code": "", "gistURL": "", "correct": "type_c", "created_by": "SwiftBeta_"}, {"id": 4, "name": "\u00bfQu\u00e9 es Xcode Profiler y c\u00f3mo se puede utilizar?", "answers": [{"id": "type_a", "value": "Xcode Profiler es un instrumento utilizado para medir el rendimiento de una aplicaci\u00f3n en tiempo de ejecuci\u00f3n"}, {"id": "type_b", "value": "Xcode Profiler es un editor de texto para Swift"}, {"id": "type_c", "value": "Xcode Profiler es una herramienta para escribir c\u00f3digo de manera reactiva"}, {"id": "type_d", "value": "Xcode Profiler es una herramienta de dise\u00f1o de interfaces de usuario para iOS"}], "code": "", "gistURL": "", "correct": "type_a", "created_by": "SwiftBeta_"}]}