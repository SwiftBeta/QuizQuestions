{"data": [{"id": 0, "name": "\u00bfQu\u00e9 es un optional en Swift y c\u00f3mo se utiliza?", "answers": [{"id": "type_a", "value": "Valor que puede ser nulo"}, {"id": "type_b", "value": "Valor que no puede ser nulo"}, {"id": "type_c", "value": "Se utiliza con estructuras"}, {"id": "type_d", "value": "Se utiliza para forzar un casting"}], "code": "var str: String? = \"Hello, world!\"\nprint(str ?? \"default\")", "gistURL": "https://gist.github.com/db2df76f09ae21804cbbdcc10d9b6d51.js", "correct": "type_a", "created_by": "SwiftBeta_"}, {"id": 1, "name": "\u00bfCu\u00e1l es la sintaxis para crear una funci\u00f3n en Swift?", "answers": [{"id": "type_a", "value": "func myFunction() {}"}, {"id": "type_b", "value": "function myFunction() {}"}, {"id": "type_c", "value": "def myFunction(): {}"}, {"id": "type_d", "value": "void myFunction() {}"}], "code": "func sum(a: Int, b: Int) -> Int {\n  return a + b\n}\nlet result = sum(a: 2, b: 3)\nprint(result)", "gistURL": "https://gist.github.com/14ae2b986bf489bb3df312d5cf4be67b.js", "correct": "type_a", "created_by": "SwiftBeta_"}, {"id": 2, "name": "\u00bfC\u00f3mo se utiliza el operador guard en Swift?", "answers": [{"id": "type_a", "value": "Para crear una constante"}, {"id": "type_b", "value": "Para manejar errores en tiempo de ejecuci\u00f3n"}, {"id": "type_c", "value": "Para hacer una comparaci\u00f3n entre dos valores"}, {"id": "type_d", "value": "Para salir de un ciclo de repetici\u00f3n"}], "code": "func divide(a: Int, b: Int?) -> Int? {\n  guard let divisor = b, divisor != 0 else {\n    return nil\n  }\n  return a / divisor\n}\nif let result = divide(a: 10, b: 2) {\n  print(result)\n}", "gistURL": "https://gist.github.com/a5d2e7c902b0ca196bc40fee06bce055.js", "correct": "type_b", "created_by": "SwiftBeta_"}, {"id": 3, "name": "\u00bfCu\u00e1l es la funci\u00f3n principal del ViewModifier en SwiftUI?", "answers": [{"id": "type_a", "value": "Modificar la apariencia de un bot\u00f3n"}, {"id": "type_b", "value": "Modificar la estructura de una vista"}, {"id": "type_c", "value": "Modificar la posici\u00f3n de una imagen"}, {"id": "type_d", "value": "Modificar la apariencia de una vista"}], "code": "struct CustomModifier: ViewModifier {\n  func body(content: Content) -> some View {\n    content\n      .foregroundColor(.red)\n      .padding()\n      .background(Color.blue)\n      .cornerRadius(10)\n  }\n}\nText(\"Hello, world!\")\n  .modifier(CustomModifier())", "gistURL": "https://gist.github.com/1801c6b0a8d1b93d8f84e7e85c768e44.js", "correct": "type_d", "created_by": "SwiftBeta_"}, {"id": 4, "name": "\u00bfC\u00f3mo utilizar Combine para procesar eventos en tiempo real?", "answers": [{"id": "type_a", "value": "Utilizar el operador for en un array"}, {"id": "type_b", "value": "Crear un observable para recibir eventos"}, {"id": "type_c", "value": "Utilizar la funci\u00f3n map para transformar eventos"}, {"id": "type_d", "value": "Utilizar la funci\u00f3n filter para filtrar eventos"}], "code": "enum MyError: Error {\n  case anError\n}\n\nlet subject = PassthroughSubject<String, MyError>()\nsubject.handleEvents(receiveSubscription: { _ in\n  print(\"Received subscription\")\n}, receiveOutput: { value in\n  print(\"Received value: \\(value)\")\n}, receiveCompletion: { completion in\n  print(\"Received completion: \\(completion)\")\n}, receiveCancel: {\n  print(\"Received cancel\")\n}).sink(receiveValue: { _ in })\nsubject.send(\"Hello, world!\")", "gistURL": "https://gist.github.com/8549781ea9377c802da1e26514fd84c0.js", "correct": "type_b", "created_by": "SwiftBeta_"}]}