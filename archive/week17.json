{"data": [{"id": 0, "name": "\u00bfCu\u00e1l es la sintaxis correcta para declarar una propiedad computada en Swift?", "answers": [{"id": "type_a", "value": "var name: String { get set }"}, {"id": "type_b", "value": "var name: String { get }"}, {"id": "type_c", "value": "var name: String = { get set }"}, {"id": "type_d", "value": "var name: String = { get }"}], "code": "class Person {\n    var firstName: String\n    var lastName: String\n    // Computed property goes here\n}", "gistURL": "https://gist.github.com/SwiftBeta/b5d5e088f6599d232be5f29d646bf9e2.js", "correct": "type_b", "explanation": "La sintaxis correcta para declarar una propiedad computada en Swift es 'var name: String { get }'. No se necesita el 'set' si solo se va a obtener el valor.", "created_by": "SwiftBeta_"}, {"id": 1, "name": "\u00bfCu\u00e1l es la forma correcta de utilizar el modificador @State en SwiftUI?", "answers": [{"id": "type_a", "value": "@State var count: Int"}, {"id": "type_b", "value": "State @var count: Int"}, {"id": "type_c", "value": "@State(count: Int)"}, {"id": "type_d", "value": "var @State count: Int"}], "code": "struct ContentView: View {\n    // Use @State here\n    var body: some View {\n        Text(\"Hello, World!\")\n    }\n}", "gistURL": "https://gist.github.com/SwiftBeta/c892d1e2b7761cbc822de71c5af0ebe0.js", "correct": "type_a", "explanation": "La forma correcta de utilizar el modificador @State en SwiftUI es '@State var count: Int'.", "created_by": "SwiftBeta_"}, {"id": 2, "name": "\u00bfC\u00f3mo se crea una vista personalizada en UIKit?", "answers": [{"id": "type_a", "value": "Heredando de UIView y sobrescribiendo el m\u00e9todo draw(_:)"}, {"id": "type_b", "value": "Heredando de UIViewController y sobrescribiendo el m\u00e9todo viewDidLoad()"}, {"id": "type_c", "value": "Heredando de UIView y sobrescribiendo el m\u00e9todo layoutSubviews()"}, {"id": "type_d", "value": "Heredando de UIViewController y sobrescribiendo el m\u00e9todo viewWillAppear(_:)"}], "code": "class CustomView: UIView {\n    // Override a method here\n}", "gistURL": "https://gist.github.com/SwiftBeta/3b30db92cf26e896ff97d9afacc88120.js", "correct": "type_a", "explanation": "Para crear una vista personalizada en UIKit, se debe heredar de UIView y sobrescribir el m\u00e9todo draw(_:).", "created_by": "SwiftBeta_"}, {"id": 3, "name": "\u00bfCu\u00e1l es la forma correcta de declarar una funci\u00f3n que devuelve un valor opcional en Swift?", "answers": [{"id": "type_a", "value": "func findValue() -> Int?"}, {"id": "type_b", "value": "func findValue() -> Optional<Int>"}, {"id": "type_c", "value": "func findValue() -> Int!"}, {"id": "type_d", "value": "func findValue() -> ?Int"}], "code": "// Declare the function here", "gistURL": "https://gist.github.com/SwiftBeta/9ea1cb837792a846a0b41bc0edc39d9f.js", "correct": "type_a", "explanation": "La forma correcta de declarar una funci\u00f3n que devuelve un valor opcional en Swift es 'func findValue() -> Int?'.", "created_by": "SwiftBeta_"}, {"id": 4, "name": "\u00bfCu\u00e1l es la forma correcta de utilizar el m\u00e9todo 'map' en un Array en Swift?", "answers": [{"id": "type_a", "value": "let newArray = array.map { $0 * 2 }"}, {"id": "type_b", "value": "let newArray = array.map( { $0 * 2 } )"}, {"id": "type_c", "value": "let newArray = map(array) { $0 * 2 }"}, {"id": "type_d", "value": "let newArray = array.map() { $0 * 2 }"}], "code": "let array = [1, 2, 3, 4, 5]\n// Use map here", "gistURL": "https://gist.github.com/SwiftBeta/c4fc1b576563ade3e632cb6c1a5680e6.js", "correct": "type_a", "explanation": "La forma correcta de utilizar el m\u00e9todo 'map' en un Array en Swift es 'let newArray = array.map { $0 * 2 }'.", "created_by": "SwiftBeta_"}, {"id": 5, "name": "\u00bfCu\u00e1l es la forma correcta de crear un ObservableObject en SwiftUI?", "answers": [{"id": "type_a", "value": "class DataModel: ObservableObject {}"}, {"id": "type_b", "value": "struct DataModel: ObservableObject {}"}, {"id": "type_c", "value": "class DataModel: @ObservableObject {}"}, {"id": "type_d", "value": "struct DataModel: @ObservableObject {}"}], "code": "// Declare the DataModel here", "gistURL": "https://gist.github.com/SwiftBeta/8c54b9bfa8e055551cc2158a1b168c07.js", "correct": "type_a", "explanation": "La forma correcta de crear un ObservableObject en SwiftUI es 'class DataModel: ObservableObject {}'. Debe ser una clase, no una estructura.", "created_by": "SwiftBeta_"}]}