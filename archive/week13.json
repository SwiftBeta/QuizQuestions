{"data": [{"id": 0, "name": "Property Wrappers: For the following code snippet, what property wrapper should be used to make the variable 'counter' thread-safe?", "answers": [{"id": "type_a", "value": "@Binding"}, {"id": "type_b", "value": "@State"}, {"id": "type_c", "value": "@Atomic"}, {"id": "type_d", "value": "@Published"}], "code": "class Counter {\n    var counter: Int\n}", "gistURL": "https://gist.github.com/SwiftBeta/d9c0b2894679076e3c80dc582138db68.js", "correct": "type_c", "explanation": "El property wrapper @Atomic se utiliza para garantizar que las operaciones de lectura y escritura sean seguras en hilos para una propiedad.", "created_by": "SwiftBeta_"}, {"id": 1, "name": "In the following code snippet, what is the correct way to use the DispatchQueue.main.async method?", "answers": [{"id": "type_a", "value": "DispatchQueue.main.async { /* code */ }"}, {"id": "type_b", "value": "DispatchQueue.async.main { /* code */ }"}, {"id": "type_c", "value": "DispatchQueue.main.sync { /* code */ }"}, {"id": "type_d", "value": "DispatchQueue.sync.main { /* code */ }"}], "code": "func performTask() {\n    // Perform task\n}", "gistURL": "https://gist.github.com/SwiftBeta/77431d23217f1580e525619e1f6deefe.js", "correct": "type_a", "explanation": "La forma correcta de utilizar DispatchQueue.main.async es DispatchQueue.main.async { /* code */ } que ejecuta el bloque de c\u00f3digo en el hilo principal de manera as\u00edncrona.", "created_by": "SwiftBeta_"}, {"id": 2, "name": "En el siguiente c\u00f3digo, \u00bfqu\u00e9 tipo de error se lanzar\u00eda si se produce una divisi\u00f3n por cero?", "answers": [{"id": "type_a", "value": "DivisionByZeroError"}, {"id": "type_b", "value": "ArithmeticError"}, {"id": "type_c", "value": "CustomError"}, {"id": "type_d", "value": "ZeroDivisionError"}], "code": "enum CustomError: Error {\n    case divisionByZero\n}\n\nfunc divide(_ a: Double, _ b: Double) throws -> Double {\n    if b == 0 {\n        throw CustomError.divisionByZero\n    }\n    return a / b\n}", "gistURL": "https://gist.github.com/SwiftBeta/35143302fc4da84846036f1cb46b11d7.js", "correct": "type_c", "explanation": "El tipo de error lanzado en este caso es CustomError.divisionByZero, ya que es el error personalizado definido en el c\u00f3digo.", "created_by": "SwiftBeta_"}, {"id": 3, "name": "\u00bfCu\u00e1l es la salida del siguiente c\u00f3digo en SwiftUI?", "answers": [{"id": "type_a", "value": "Se muestra 'Hello, world!' en la pantalla"}, {"id": "type_b", "value": "Se muestra un bot\u00f3n con el texto 'Press me!' en la pantalla"}, {"id": "type_c", "value": "Se muestra un bot\u00f3n con el texto 'Press me!' y un texto 'Hello, world!' en la pantalla"}, {"id": "type_d", "value": "Error de compilaci\u00f3n"}], "code": "import SwiftUI\n\nstruct ContentView: View {\n    @State private var showText = false\n\n    var body: some View {\n        VStack {\n            if showText {\n                Text(\"Hello, world!\")\n            }\n            Button(\"Press me!\") {\n                self.showText.toggle()\n            }\n        }\n    }\n}", "gistURL": "https://gist.github.com/SwiftBeta/6d34b107e8218003add474c40a12d79d.js", "correct": "type_c", "explanation": "Se muestra un bot\u00f3n con el texto 'Press me!' y cuando se presiona, aparece el texto 'Hello, world!' en la pantalla.", "created_by": "SwiftBeta_"}, {"id": 4, "name": "\u00bfCu\u00e1l de las siguientes afirmaciones es verdadera sobre 'weak' y 'unowned'?", "answers": [{"id": "type_a", "value": "'weak' y 'unowned' son equivalentes y no hay diferencias entre ellos"}, {"id": "type_b", "value": "Las referencias 'weak' pueden ser 'nil', mientras que las referencias 'unowned' siempre tienen un valor"}, {"id": "type_c", "value": "Las referencias 'unowned' pueden ser 'nil', mientras que las referencias 'weak' siempre tienen un valor"}, {"id": "type_d", "value": "Ambos, 'weak' y 'unowned', no pueden ser 'nil'"}], "code": "class ClassA {\n    weak var classB: ClassB?\n    unowned let classC: ClassC\n}", "gistURL": "https://gist.github.com/SwiftBeta/86d35b41c72b05d2f2ce546a82fd8a9c.js", "correct": "type_b", "explanation": "La diferencia entre 'weak' y 'unowned' es que las referencias 'weak' pueden ser 'nil', mientras que las referencias 'unowned' siempre tienen un valor y no pueden ser 'nil'.", "created_by": "SwiftBeta_"}, {"id": 5, "name": "En Combine, \u00bfcu\u00e1l es el operador que permite combinar eventos de varias publicaciones en un solo flujo?", "answers": [{"id": "type_a", "value": "merge"}, {"id": "type_b", "value": "zip"}, {"id": "type_c", "value": "combineLatest"}, {"id": "type_d", "value": "flatMap"}], "code": "", "gistURL": "", "correct": "type_a", "explanation": "El operador 'merge' en Combine permite combinar eventos de varias publicaciones en un solo flujo.", "created_by": "SwiftBeta_"}]}