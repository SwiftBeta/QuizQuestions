{"data": [{"id": 0, "name": "\u00bfC\u00f3mo se crea una estructura en Swift que se ajuste al protocolo Identifiable?", "answers": [{"id": "type_a", "value": "Agregando un UUID como variable de instancia"}, {"id": "type_b", "value": "Implementando una funci\u00f3n id()"}, {"id": "type_c", "value": "Agregando una variable de instancia llamada id"}, {"id": "type_d", "value": "Implementando una variable de instancia llamada identifier"}], "code": "struct MyStruct: Identifiable {\n\n}", "gistURL": "https://gist.github.com/SwiftBeta/382aa1e2c3a8d2766031d0f63fd76cb7.js", "correct": "type_a", "explanation": "Para ajustarse al protocolo Identifiable, hay que agregar un UUID como variable de instancia llamada id.", "created_by": "SwiftBeta_"}, {"id": 1, "name": "\u00bfCu\u00e1l de estas opciones crea correctamente una vista personalizada en SwiftUI?", "answers": [{"id": "type_a", "value": "Creando una clase que hereda de SwiftUI.View"}, {"id": "type_b", "value": "Creando una estructura que se ajuste al protocolo View"}, {"id": "type_c", "value": "Implementando una funci\u00f3n llamada body"}, {"id": "type_d", "value": "Creando una estructura que hereda de SwiftUI.View"}], "code": "struct MyCustomView: View {\n\n}", "gistURL": "https://gist.github.com/SwiftBeta/621797710d91062d449c1951d3d44736.js", "correct": "type_b", "explanation": "En SwiftUI, se crea una vista personalizada al crear una estructura que se ajuste al protocolo View.", "created_by": "SwiftBeta_"}, {"id": 2, "name": "\u00bfCu\u00e1l es la forma correcta de llamar a una funci\u00f3n asincr\u00f3nica en Swift utilizando async/await?", "answers": [{"id": "type_a", "value": "Usar DispatchQueue.main.async"}, {"id": "type_b", "value": "Agregar la palabra clave await antes de la funci\u00f3n"}, {"id": "type_c", "value": "Usar la palabra clave async antes de la funci\u00f3n"}, {"id": "type_d", "value": "Usar la funci\u00f3n DispatchQueue.global().async"}], "code": "async function fetchData() -> String {\n  return 'Hello, World!'\n}\n\nasync function main() {\n  let data = await fetchData()\n}", "gistURL": "https://gist.github.com/SwiftBeta/552607a0113f3c192f6bc187e25bd6fd.js", "correct": "type_b", "explanation": "Para llamar a una funci\u00f3n asincr\u00f3nica en Swift utilizando async/await, se debe agregar la palabra clave await antes de la funci\u00f3n.", "created_by": "SwiftBeta_"}, {"id": 3, "name": "\u00bfCu\u00e1l es el prop\u00f3sito principal de las clases de NSObject en UIKit?", "answers": [{"id": "type_a", "value": "Proporcionar una estructura b\u00e1sica para las clases"}, {"id": "type_b", "value": "Permitir la herencia de m\u00faltiples clases"}, {"id": "type_c", "value": "Proporcionar un patr\u00f3n de dise\u00f1o para la creaci\u00f3n de objetos"}, {"id": "type_d", "value": "Permitir la serializaci\u00f3n de objetos"}], "code": "", "gistURL": "", "correct": "type_a", "explanation": "Las clases de NSObject en UIKit proporcionan una estructura b\u00e1sica y funcionalidad com\u00fan para todas las clases en UIKit.", "created_by": "SwiftBeta_"}, {"id": 4, "name": "\u00bfCu\u00e1l es la forma correcta de actualizar la interfaz de usuario en el hilo principal utilizando Grand Central Dispatch?", "answers": [{"id": "type_a", "value": "Usar DispatchQueue.global().async"}, {"id": "type_b", "value": "Usar DispatchQueue.main.async"}, {"id": "type_c", "value": "Usar DispatchQueue.main.sync"}, {"id": "type_d", "value": "Usar DispatchQueue.global().sync"}], "code": "DispatchQueue.global(qos: .background).async {\n  // Realizar una tarea en segundo plano\n\n  DispatchQueue.main.async {\n    // Actualizar la interfaz de usuario\n  }\n}", "gistURL": "https://gist.github.com/SwiftBeta/89a70cb5190966d1d9fa78f75d60ac79.js", "correct": "type_b", "explanation": "Para actualizar la interfaz de usuario en el hilo principal, se debe utilizar DispatchQueue.main.async.", "created_by": "SwiftBeta_"}, {"id": 5, "name": "\u00bfQu\u00e9 modificador de acceso permite que un miembro de una clase sea accesible solo dentro de la misma clase?", "answers": [{"id": "type_a", "value": "private"}, {"id": "type_b", "value": "fileprivate"}, {"id": "type_c", "value": "internal"}, {"id": "type_d", "value": "public"}], "code": "", "gistURL": "", "correct": "type_a", "explanation": "El modificador de acceso private permite que un miembro de una clase sea accesible solo dentro de la misma clase.", "created_by": "SwiftBeta_"}, {"id": 6, "name": "\u00bfCu\u00e1l de las siguientes opciones es correcta para implementar una propiedad calculada en Swift?", "answers": [{"id": "type_a", "value": "Usar una funci\u00f3n con el mismo nombre que la propiedad"}, {"id": "type_b", "value": "Usar una variable con un bloque de c\u00f3digo entre llaves"}, {"id": "type_c", "value": "Usar la palabra clave 'computed' antes de la propiedad"}, {"id": "type_d", "value": "Usar una variable con un get y, opcionalmente, un set"}], "code": "var computedProperty: Int {\n  get {\n    return 10\n  }\n}", "gistURL": "https://gist.github.com/SwiftBeta/bc0841733dd190d07e071429272f710f.js", "correct": "type_d", "explanation": "Para implementar una propiedad calculada en Swift, se debe usar una variable con un bloque get y, opcionalmente, un set.", "created_by": "SwiftBeta_"}, {"id": 7, "name": "\u00bfCu\u00e1l es la forma correcta de declarar una funci\u00f3n en Swift que devuelve un tipo opcional?", "answers": [{"id": "type_a", "value": "Usar la palabra clave 'optional' antes del tipo de retorno"}, {"id": "type_b", "value": "Agregar un signo de interrogaci\u00f3n despu\u00e9s del tipo de retorno"}, {"id": "type_c", "value": "Usar la palabra clave 'throws' antes del tipo de retorno"}, {"id": "type_d", "value": "Agregar un signo de exclamaci\u00f3n despu\u00e9s del tipo de retorno"}], "code": "func optionalFunction() -> String? {\n  return 'Hello, World!'\n}", "gistURL": "https://gist.github.com/SwiftBeta/b9f6a68b0396e2b7b09ddbfbb4cd3ba2.js", "correct": "type_b", "explanation": "Para declarar una funci\u00f3n en Swift que devuelve un tipo opcional, se debe agregar un signo de interrogaci\u00f3n despu\u00e9s del tipo de retorno.", "created_by": "SwiftBeta_"}, {"id": 8, "name": "\u00bfCu\u00e1l es la forma correcta de aplicar un modificador a una vista en SwiftUI?", "answers": [{"id": "type_a", "value": "Usar la funci\u00f3n modify()"}, {"id": "type_b", "value": "Usar la funci\u00f3n apply()"}, {"id": "type_c", "value": "Usar la funci\u00f3n with()"}, {"id": "type_d", "value": "Usar la funci\u00f3n .modifierName()"}], "code": "Text('Hello, World!')", "gistURL": "https://gist.github.com/SwiftBeta/8b3eace151f312dfb6fee858f6981ff0.js", "correct": "type_d", "explanation": "Para aplicar un modificador a una vista en SwiftUI, se debe usar la funci\u00f3n .modifierName() (por ejemplo, .padding() o .background()).", "created_by": "SwiftBeta_"}, {"id": 9, "name": "\u00bfCu\u00e1l es la forma correcta de crear un delegado en Swift?", "answers": [{"id": "type_a", "value": "Usar una propiedad normal"}, {"id": "type_b", "value": "Usar una propiedad con el atributo @delegate"}, {"id": "type_c", "value": "Usar una propiedad d\u00e9bil con el protocolo como tipo"}, {"id": "type_d", "value": "Usar una propiedad con el atributo @IBOutlet"}], "code": "protocol MyDelegate {\n  func doSomething()\n}\n\nclass MyClass {\n  var delegate: MyDelegate?\n}", "gistURL": "https://gist.github.com/SwiftBeta/f68bebc0a5b9dc3a8c045e7a13ee2e0b.js", "correct": "type_c", "explanation": "Para crear un delegado en Swift, se debe usar una propiedad d\u00e9bil (weak) con el protocolo como tipo.", "created_by": "SwiftBeta_"}]}