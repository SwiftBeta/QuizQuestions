{"data": [{"id": 0, "name": "\u00bfCu\u00e1l es el resultado de esta operaci\u00f3n en Swift?", "answers": [{"id": "type_a", "value": "7"}, {"id": "type_b", "value": "4"}, {"id": "type_c", "value": "1"}, {"id": "type_d", "value": "5"}], "code": "let x = 2\nlet result = (x * (x + 1)) % 5", "gistURL": "https://gist.github.com/SwiftBeta/51fb19d16db02d04e1389b147115ab6c.js", "correct": "type_c", "explanation": "El resultado es 1, puedes compilarlo en aprendeswift.com para ver el resultado", "created_by": "SwiftBeta_"}, {"id": 1, "name": "\u00bfQu\u00e9 patr\u00f3n de dise\u00f1o se utiliza com\u00fanmente en SwiftUI?", "answers": [{"id": "type_a", "value": "MVC (Model-View-Controller)"}, {"id": "type_b", "value": "MVVM (Model-View-ViewModel)"}, {"id": "type_c", "value": "MVP (Model-View-Presenter)"}, {"id": "type_d", "value": "Viper"}], "code": "", "gistURL": "", "correct": "type_b", "explanation": "SwiftUI utiliza com\u00fanmente el patr\u00f3n de dise\u00f1o MVVM (Model-View-ViewModel) para una mejor organizaci\u00f3n y separaci\u00f3n de responsabilidades en el c\u00f3digo.", "created_by": "SwiftBeta_"}, {"id": 2, "name": "\u00bfQu\u00e9 hace el siguiente c\u00f3digo en SwiftUI?", "answers": [{"id": "type_a", "value": "Muestra un Text con un fondo verde"}, {"id": "type_b", "value": "Muestra un Text con un fondo rojo"}, {"id": "type_c", "value": "Muestra un Text con un fondo azul"}, {"id": "type_d", "value": "Error de compilaci\u00f3n"}], "code": "Text(\"Hello, World!\")\n    .background(Color.green)", "gistURL": "https://gist.github.com/SwiftBeta/28c441a4407677649b66822e5ab5c939.js", "correct": "type_a", "explanation": "El c\u00f3digo muestra un Text con el texto \"Hello, World!\" y establece un fondo verde utilizando la funci\u00f3n background y la propiedad Color.green.", "created_by": "SwiftBeta_"}, {"id": 3, "name": "\u00bfCu\u00e1l es la forma correcta de crear una vista personalizada en UIKit?", "answers": [{"id": "type_a", "value": "Heredar de UIView y sobreescribir draw(_:)"}, {"id": "type_b", "value": "Heredar de UIViewController y sobreescribir viewDidLoad"}, {"id": "type_c", "value": "Heredar de UIView y sobreescribir initWithFrame"}, {"id": "type_d", "value": "Heredar de UIView y sobreescribir layoutSubviews"}], "code": "", "gistURL": "", "correct": "type_a", "explanation": "Para crear una vista personalizada en UIKit, es necesario heredar de UIView y sobreescribir el m\u00e9todo draw(_:), que es el encargado de dibujar la vista en la pantalla.", "created_by": "SwiftBeta_"}, {"id": 4, "name": "\u00bfQu\u00e9 hace la siguiente funci\u00f3n en Swift?", "answers": [{"id": "type_a", "value": "Devuelve el primer elemento del array"}, {"id": "type_b", "value": "Devuelve el primer elemento del array que cumple con la condici\u00f3n"}, {"id": "type_c", "value": "Devuelve todos los elementos del array que cumplen con la condici\u00f3n"}, {"id": "type_d", "value": "Devuelve el \u00faltimo elemento del array"}], "code": "func firstMatch<T>(array: [T], condition: (T) -> Bool) -> T? {\n    for item in array {\n        if condition(item) {\n            return item\n        }\n    }\n    return nil\n}", "gistURL": "https://gist.github.com/SwiftBeta/9a291b969561a1bc495b10d2e11e9116.js", "correct": "type_b", "explanation": "La funci\u00f3n firstMatch recorre el array y devuelve el primer elemento que cumple con la condici\u00f3n especificada en el closure. Si ning\u00fan elemento cumple con la condici\u00f3n, devuelve nil.", "created_by": "SwiftBeta_"}, {"id": 5, "name": "\u00bfCu\u00e1l ser\u00e1 el resultado de la siguiente funci\u00f3n en Swift?", "answers": [{"id": "type_a", "value": "[2, 4, 6, 8, 10]"}, {"id": "type_b", "value": "[1, 3, 5, 7, 9]"}, {"id": "type_c", "value": "[1, 2, 3, 4, 5]"}, {"id": "type_d", "value": "Error de compilaci\u00f3n"}], "code": "func filterNumbers(array: [Int], isEven: Bool) -> [Int] {\n    return array.filter { isEven ? ($0 % 2 == 0) : ($0 % 2 != 0) }\n}\n\nlet numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nlet result = filterNumbers(array: numbers, isEven: true)", "gistURL": "https://gist.github.com/SwiftBeta/a6602b5feab7fc08e613d5c8bd926b9b.js", "correct": "type_a", "explanation": "La funci\u00f3n filterNumbers filtra el array de n\u00fameros seg\u00fan la condici\u00f3n isEven. Si isEven es true, devuelve solo los n\u00fameros pares, en este caso: [2, 4, 6, 8, 10].", "created_by": "SwiftBeta_"}, {"id": 6, "name": "\u00bfQu\u00e9 output mostrar\u00e1 la siguiente l\u00ednea de c\u00f3digo?", "answers": [{"id": "type_a", "value": "Optional(42)"}, {"id": "type_b", "value": "42"}, {"id": "type_c", "value": "nil"}, {"id": "type_d", "value": "Error de compilaci\u00f3n"}], "code": "print(Int(\"42\"))", "gistURL": "https://gist.github.com/SwiftBeta/d258267ba1e20d42191d84de3f7d9523.js", "correct": "type_a", "explanation": "La funci\u00f3n Int(_:) devuelve un valor opcional cuando se le pasa un String como argumento. Si el String puede ser convertido a un entero, devuelve el valor como Optional(Int). En este caso, mostrar\u00e1 Optional(42).", "created_by": "SwiftBeta_"}, {"id": 7, "name": "\u00bfCu\u00e1l es la forma correcta de declarar una variable de tipo String opcional en Swift?", "answers": [{"id": "type_a", "value": "var myString: String?"}, {"id": "type_b", "value": "var myString: Optional<String>"}, {"id": "type_c", "value": "var myString: String? = nil"}, {"id": "type_d", "value": "Todas las anteriores"}], "code": "", "gistURL": "", "correct": "type_d", "explanation": "Todas las opciones son formas v\u00e1lidas de declarar una variable de tipo String opcional en Swift. Puedes usar la notaci\u00f3n abreviada con el signo de interrogaci\u00f3n (?) o la notaci\u00f3n completa con la palabra clave Optional.", "created_by": "SwiftBeta_"}, {"id": 8, "name": "\u00bfQu\u00e9 hace la siguiente funci\u00f3n en Swift?", "answers": [{"id": "type_a", "value": "Devuelve el cuadrado de la suma de a y b"}, {"id": "type_b", "value": "Devuelve la suma de los cuadrados de a y b"}, {"id": "type_c", "value": "Devuelve el producto de los cuadrados de a y b"}, {"id": "type_d", "value": "Devuelve el producto de la suma de los cuadrados de a y b"}], "code": "func sumOfSquares(a: Int, b: Int) -> Int {\n    return a * a + b * b\n}", "gistURL": "https://gist.github.com/SwiftBeta/7782650a34c52980c4d0838ece4672e5.js", "correct": "type_b", "explanation": "La funci\u00f3n sumOfSquares devuelve la suma de los cuadrados de a y b (a * a + b * b).", "created_by": "SwiftBeta_"}, {"id": 9, "name": "\u00bfQu\u00e9 es un EnvironmentObject en SwiftUI?", "answers": [{"id": "type_a", "value": "Un objeto que almacena valores clave-valor en el entorno"}, {"id": "type_b", "value": "Un objeto que se pasa impl\u00edcitamente a trav\u00e9s de la jerarqu\u00eda de vistas"}, {"id": "type_c", "value": "Un objeto que representa el entorno de la aplicaci\u00f3n"}, {"id": "type_d", "value": "Un objeto que encapsula el estado de una vista"}], "code": "", "gistURL": "", "correct": "type_b", "explanation": "Un EnvironmentObject en SwiftUI es un objeto que se pasa impl\u00edcitamente a trav\u00e9s de la jerarqu\u00eda de vistas, lo que permite compartir datos entre diferentes vistas sin necesidad de pasarlo expl\u00edcitamente como par\u00e1metros.", "created_by": "SwiftBeta_"}]}
