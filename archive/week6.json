{"data": [{"id": 0, "name": "\u00bfQu\u00e9 es @State?", "answers": [{"id": "type_a", "value": "Un gestor de memoria en Swift"}, {"id": "type_b", "value": "Una propiedad que guarda el estado de una vista en SwiftUI"}, {"id": "type_c", "value": "Un decorador de funci\u00f3n en Swift"}, {"id": "type_d", "value": "Un atributo en UIKit"}], "code": "struct ContentView: View {\\n    @State private var isOn = false\\n    var body: some View {\\n        Toggle(isOn: $isOn) {\\n            Text(\\\"Toggle\\\")\\n        }\\n    }\\n}", "gistURL": "https://gist.github.com/SwiftBeta/51e79d740b93b2e7fb1f860a4dc68a66.js", "correct": "type_b", "explanation": "@State es una propiedad wrapper que guarda el estado de una vista en SwiftUI. Se utiliza para actualizar la vista cuando el estado cambia.", "created_by": "SwiftBeta_"}, {"id": 1, "name": "\u00bfCu\u00e1l es la sintaxis correcta para definir una funci\u00f3n en Swift?", "answers": [{"id": "type_a", "value": "function functionName(parameters) -> ReturnType"}, {"id": "type_b", "value": "func functionName(parameters) -> ReturnType"}, {"id": "type_c", "value": "def functionName(parameters) -> ReturnType"}, {"id": "type_d", "value": "functionName(parameters) -> ReturnType"}], "code": "func myFunction(parameter: Int) -> String {\\n    return \\\"Hello, World!\\\"\\n}", "gistURL": "https://gist.github.com/SwiftBeta/fd2ba112c70a5b26531a8c9f3d3e7859.js", "correct": "type_b", "explanation": "En Swift, las funciones se definen utilizando la palabra clave 'func', seguida del nombre de la funci\u00f3n, los par\u00e1metros entre par\u00e9ntesis y el tipo de retorno despu\u00e9s de la flecha (->).", "created_by": "SwiftBeta_"}, {"id": 2, "name": "\u00bfC\u00f3mo se usa 'if let' en Swift?", "answers": [{"id": "type_a", "value": "Para comprobar si una variable es 'nil' antes de usarla"}, {"id": "type_b", "value": "Para asignar un valor a una variable si se cumple una condici\u00f3n"}, {"id": "type_c", "value": "Para ejecutar un bloque de c\u00f3digo si una variable es 'nil'"}, {"id": "type_d", "value": "Para desempaquetar de forma segura un valor opcional"}], "code": "let optionalString: String? = \\\"Hello, World!\\\"\\nif let unwrappedString = optionalString {\\n    print(unwrappedString)\\n}", "gistURL": "https://gist.github.com/SwiftBeta/746134de440facd59bdbfb0c4daf7488.js", "correct": "type_d", "explanation": "'if let' se utiliza en Swift para desempaquetar de forma segura un valor opcional. Si el valor opcional no es 'nil', se asigna a una nueva constante y se ejecuta el bloque de c\u00f3digo.", "created_by": "SwiftBeta_"}, {"id": 3, "name": "\u00bfC\u00f3mo se crea una vista personalizada en SwiftUI?", "answers": [{"id": "type_a", "value": "Conformando al protocolo UIView"}, {"id": "type_b", "value": "Herencia de la clase UIViewController"}, {"id": "type_c", "value": "Herencia de la clase UIView"}, {"id": "type_d", "value": "Conformando al protocolo View"}], "code": "import SwiftUI\\n\\nstruct CustomView: View {\\n    var body: some View {\\n        Text(\\\"Hello, World!\\\")\\n    }\\n}", "gistURL": "https://gist.github.com/SwiftBeta/1a2925a61a500b2aa7cb67ca0c4b1959.js", "correct": "type_d", "explanation": "En SwiftUI, para crear una vista personalizada, se debe conformar al protocolo View y proporcionar una implementaci\u00f3n para la propiedad 'body'.", "created_by": "SwiftBeta_"}, {"id": 4, "name": "\u00bfQu\u00e9 es una 'subscript' en Swift?", "answers": [{"id": "type_a", "value": "Una funci\u00f3n que devuelve el \u00edndice de un elemento en un array"}, {"id": "type_b", "value": "Un m\u00e9todo para acceder o modificar los valores de una estructura mediante \u00edndices"}, {"id": "type_c", "value": "Un tipo de variable especial que solo puede contener valores num\u00e9ricos"}, {"id": "type_d", "value": "Una construcci\u00f3n de la sintaxis para definir funciones anidadas"}], "code": "struct TimesTable {\\n    let multiplier: Int\\n    subscript(index: Int) -> Int {\\n        return multiplier * index\\n    }\\n}\\nlet threeTimesTable = TimesTable(multiplier: 3)\\nprint(threeTimesTable[6])", "gistURL": "https://gist.github.com/SwiftBeta/18e95411170af771d1d4092c0572af45.js", "correct": "type_b", "explanation": "Una 'subscript' es un m\u00e9todo en Swift para acceder o modificar los valores de una estructura utilizando \u00edndices. Se define con la palabra clave 'subscript' y proporciona una implementaci\u00f3n similar a una funci\u00f3n o un m\u00e9todo.", "created_by": "SwiftBeta_"}, {"id": 5, "name": "Dentro de una aplicaci\u00f3n de iOS, \u00bfcu\u00e1l debe ser la clase principal desde la que hereda el controlador de la vista?", "answers": [{"id": "type_a", "value": "VisualViewController"}, {"id": "type_b", "value": "ViewController"}, {"id": "type_c", "value": "UIViewController"}, {"id": "type_d", "value": "BaseViewController"}], "code": "class MyViewController: UIViewController {\\n\\n}", "gistURL": "https://gist.github.com/SwiftBeta/a2003c7f7672eb85d432ec23f2b14a67.js", "correct": "type_c", "explanation": "En una aplicaci\u00f3n de iOS, el controlador de la vista debe heredar de la clase UIViewController, que es la clase principal para administrar vistas y estructuras de navegaci\u00f3n en una aplicaci\u00f3n de UIKit.", "created_by": "SwiftBeta_"}, {"id": 6, "name": "\u00bfQu\u00e9 hace '@Published' en Combine?", "answers": [{"id": "type_a", "value": "Publica una funci\u00f3n"}, {"id": "type_b", "value": "Crea un objeto de suscripci\u00f3n"}, {"id": "type_c", "value": "Crea un publisher para una propiedad"}, {"id": "type_d", "value": "Define el proceso de publicaci\u00f3n de una aplicaci\u00f3n"}], "code": "class MyModel: ObservableObject {\\n    @Published var value = 0\\n}", "gistURL": "https://gist.github.com/SwiftBeta/ebba589dde6f14eb4045f22fabdc7ed6.js", "correct": "type_c", "explanation": "@Published es un atributo 'property wrapper' utilizado en Combine para crear autom\u00e1ticamente un publisher para una propiedad. Los cambios en la propiedad se notifican a todos los suscriptores.", "created_by": "SwiftBeta_"}, {"id": 7, "name": "En Compass, \u00bfqu\u00e9 significa 'Publisher'?", "answers": [{"id": "type_a", "value": "Un componente que env\u00eda actualizaciones de estado"}, {"id": "type_b", "value": "Un componente que maneja eventos"}, {"id": "type_c", "value": "Un componente que muestra el contenido en una vista"}, {"id": "type_d", "value": "Un componente que permite la navegaci\u00f3n entre vistas"}], "code": "", "gistURL": "", "correct": "type_a", "explanation": "En Combine, 'Publisher' es un componente que env\u00eda actualizaciones de estado a otros componentes del sistema a trav\u00e9s de un proceso de comunicaci\u00f3n unidireccional y as\u00edncrono.", "created_by": "SwiftBeta_"}, {"id": 8, "name": "\u00bfCu\u00e1l es el prop\u00f3sito de 'OperationQueue' en Swift?", "answers": [{"id": "type_a", "value": "Administrar conjuntos de operaciones y las comunicaciones entre ellas"}, {"id": "type_b", "value": "Administrar la persistencia de datos en una base de datos local"}, {"id": "type_c", "value": "Administrar las conexiones de red y la transferencia de datos"}, {"id": "type_d", "value": "Administrar el contenido de im\u00e1genes y archivos multimedia"}], "code": "", "gistURL": "", "correct": "type_a", "explanation": "'OperationQueue' en Swift es una clase que administra conjuntos de operaciones relacionadas ('Operation' objetos) y las comunicaciones entre ellas. Permite ejecutar operaciones de forma concurrente o secuencial.", "created_by": "SwiftBeta_"}, {"id": 9, "name": "\u00bfC\u00f3mo se llama la API de dibujo 2D en iOS y macOS?", "answers": [{"id": "type_a", "value": "Core Animation"}, {"id": "type_b", "value": "Metal"}, {"id": "type_c", "value": "Core Graphics"}, {"id": "type_d", "value": "SpriteKit"}], "code": "", "gistURL": "", "correct": "type_c", "explanation": "Core Graphics es la API de dibujo 2D para iOS y macOS. Proporciona servicios de gr\u00e1ficos de bajo nivel para aplicaciones y es parte del conjunto m\u00e1s amplio de tecnolog\u00edas de gr\u00e1ficos de Apple.", "created_by": "SwiftBeta_"}]}