{"data": [{"id": 0, "name": "\u00bfCu\u00e1l es la forma correcta de declarar una variable opcional en Swift?", "answers": [{"id": "type_a", "value": "var optionalVar: String?"}, {"id": "type_b", "value": "var optionalVar: Optional<String>"}, {"id": "type_c", "value": "var optionalVar: String!"}, {"id": "type_d", "value": "var optionalVar: String"}], "code": "var optionalVar: String?", "gistURL": "https://gist.github.com/SwiftBeta/d28007db241a0fd2fd622f44bb00c32b.js", "correct": "type_a", "explanation": "En Swift, las variables opcionales se declaran utilizando un signo de interrogaci\u00f3n (?) despu\u00e9s del tipo de dato.", "created_by": "SwiftBeta_"}, {"id": 1, "name": "\u00bfCu\u00e1l es la forma correcta de utilizar un guard let en Swift?", "answers": [{"id": "type_a", "value": "guard let unwrappedVar = optionalVar else { return }"}, {"id": "type_b", "value": "guard let optionalVar = unwrappedVar else { return }"}, {"id": "type_c", "value": "guard let optionalVar else { return }"}, {"id": "type_d", "value": "guard let unwrappedVar else { return }"}], "code": "func exampleFunction(optionalVar: String?) {\n    guard let unwrappedVar = optionalVar else { return }\n    print(unwrappedVar)\n}", "gistURL": "https://gist.github.com/SwiftBeta/f805c3e0a67107d5c77fd674c3dd7efd.js", "correct": "type_a", "explanation": "La forma correcta de utilizar un guard let es: guard let unwrappedVar = optionalVar else { return }. Esto desempaqueta el valor opcional y lo asigna a la variable unwrappedVar si el valor no es nil.", "created_by": "SwiftBeta_"}, {"id": 2, "name": "\u00bfCu\u00e1l es la forma correcta de declarar una propiedad computada en Swift?", "answers": [{"id": "type_a", "value": "var computedProperty: String { return \"Hello, World!\" }"}, {"id": "type_b", "value": "var computedProperty: String = { return \"Hello, World!\" }"}, {"id": "type_c", "value": "var computedProperty: String { get { return \"Hello, World!\" } }"}, {"id": "type_d", "value": "var computedProperty: String = \"Hello, World!\""}], "code": "class ExampleClass {\n    var computedProperty: String {\n        return \"Hello, World!\"\n    }\n}", "gistURL": "https://gist.github.com/SwiftBeta/ad00101dec05c1d1f84fa5626c695b34.js", "correct": "type_a", "explanation": "La forma correcta de declarar una propiedad computada es: var computedProperty: String { return \"Hello, World!\" }. Esto crea una propiedad computada que devuelve el valor \"Hello, World!\".", "created_by": "SwiftBeta_"}, {"id": 3, "name": "\u00bfCu\u00e1l es la forma correcta de declarar una funci\u00f3n que devuelve un closure en Swift?", "answers": [{"id": "type_a", "value": "func makeIncrementer() -> (Int) -> Int"}, {"id": "type_b", "value": "func makeIncrementer() -> (Int) -> (Int)"}, {"id": "type_c", "value": "func makeIncrementer() -> ((Int) -> Int)"}, {"id": "type_d", "value": "func makeIncrementer() -> (Int, Int) -> Int"}], "code": "func makeIncrementer() -> (Int) -> Int {\n    return { (value: Int) -> Int in\n        return value + 1\n    }\n}", "gistURL": "https://gist.github.com/SwiftBeta/0b2867bc3ac6a4f306557299e617779b.js", "correct": "type_a", "explanation": "La forma correcta de declarar una funci\u00f3n que devuelve un closure es: func makeIncrementer() -> (Int) -> Int. Esto crea una funci\u00f3n que devuelve un closure que toma un entero como argumento y devuelve otro entero.", "created_by": "SwiftBeta_"}, {"id": 4, "name": "\u00bfCu\u00e1l es la forma correcta de declarar un protocolo en Swift?", "answers": [{"id": "type_a", "value": "protocol ExampleProtocol {}"}, {"id": "type_b", "value": "protocol ExampleProtocol;"}, {"id": "type_c", "value": "protocol ExampleProtocol()"}, {"id": "type_d", "value": "protocol ExampleProtocol {};"}], "code": "", "gistURL": "", "correct": "type_a", "explanation": "La forma correcta de declarar un protocolo en Swift es: protocol ExampleProtocol {}. Esto crea un protocolo vac\u00edo llamado ExampleProtocol.", "created_by": "SwiftBeta_"}, {"id": 5, "name": "\u00bfCu\u00e1l es la forma correcta de declarar una extensi\u00f3n en Swift?", "answers": [{"id": "type_a", "value": "extension ExampleClass {}"}, {"id": "type_b", "value": "extension ExampleClass;"}, {"id": "type_c", "value": "extension ExampleClass()"}, {"id": "type_d", "value": "extension ExampleClass {};"}], "code": "class ExampleClass {}\n\nextension ExampleClass {\n    func exampleFunction() {\n        print(\"Hello, World!\")\n    }\n}", "gistURL": "https://gist.github.com/SwiftBeta/24c224bb98381b3f736cf329c203b9a6.js", "correct": "type_a", "explanation": "La forma correcta de declarar una extensi\u00f3n en Swift es: extension ExampleClass {}. Esto crea una extensi\u00f3n para la clase ExampleClass que puede agregar nuevas funciones y propiedades.", "created_by": "SwiftBeta_"}]}